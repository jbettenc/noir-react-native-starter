{"noir_version":"1.0.0-beta.7+913ee6308f6ea040608df452a66bcb20bece3ca6","hash":"15253230437579372343","abi":{"parameters":[{"name":"a","type":{"kind":"field"},"visibility":"private"},{"name":"b","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"pdzdrlzVmUbhe/ExB2vM9TcXtxJFESFOhGQZZKClFuLe23a9451GLaMWfQLZgfoS2zV2Vc3vmfu3N/96+89f//OPH97/+8ef33z7t9/e/PPDD+/e/fCff7z78fvvfvnhx/cf/9vf3myf/sL15tvxzRvu19/mm2/3j3973nx7fPNmfPw3jt9//+aND/vHLx/evv30qC/mfJz+03cf3r7/5c2373999+6bN//13btfP/9LP//03fvPf//luw8f/+n2zZu37//18e8fB/77h3dvP/2n379Zj96+/tC5jTx4jqsP5/7D4/n646/jyOOvc/8rj5/4+Dn/0uP9xd/bV//3/+TXD1cez7Uef/7x9+/8+uPHmDMDxv7l7+DzhwnXn0yYw9/CMU++NuH++oSD7cmEg3P8lQlj94/hGNfzlyaM8/87gfv/MOHP/iz7i+A4v/Zn+WePP+4+F/jD4//+8avvvv/hw/+q/OOfPZ+eRB+L/vzF/vri+PzF+fri+vzF/fpifv7ieX1BJmQErxlkCK8pZAyvOWQQr0lk1HiNGv6/eY0aGTVeo0ZGjdeokVHjNWpk1P4atWfUnl9ZRu2vUXtG7a9Re0btr1F7Rh2vUUdGHa9Rh79Lr1FHRh2vUUdGHa9RR0adr1FnRp2vUWdGnfkdz6jzNerMqPM16syo6zXqyqjrNerKqOs16vJP7zXqyqjrNerKqPs16s6o+zXqzqj7NerOqDvPhIy6X6PujJqvUTOj5mvUzKj5GjUzar5GTZ9Vr1Ezo57XqCejnteoJ6Oe16gno57XqCejnjxD+xTNc3TzSbrlWbr5NN3yPN18om55pm4+Vbc8VzeH9onvUJ/6fe775O+z36d/n/8GYAEkAUZzylArIBlgByQELIGkgC2QGLAGdiN1aILAIkgS2ASJAqsgWWAXJAyOpp+htkHiwDpIHtgHCQQLIYlgI5x+Q3FoMsFOSChYCkkFWyGxYC0kF65+m8pQiyHJYDMkGqyGZIPdkHCwHG6/+Tk08WA9JB/shwSEBZGEsCESEbPfUjPUjkhIWBJJCVsiMWFNJCfsicdv1P1OnW/VFjVS1LCokaKGRY0UNSxqpKhhUQO//zs0RQ2LGilqWNRIUcOiRooafU3xRWW9qmRoX1d8Yekriy8tfW3xxcWiRooaFjV2X6scmqKGRY0UNSxqpKhhUSNFDYsaKWocfQXMUIsaKWpY1EhRw6JGihoWNVLUsKhx+rrq0BQ1LGqkqGFRI0UNixopaljUSFHj6qt1hlrUSFHDokaKGhY1UtSwqJGihkWN2/cADk1Rw6JGihoWNVLUsKiRooZFjRQ1Zt9ZZKhFjRQ1LGqkqGFRI0UNixopaljUeHy/0jcsecdiUXuK2i1qT1G7Re0pareoPUXtFrXj2yCHpqjdovYUtVvUnqJ2i9pT1G5Re4raR99cZahF7Slqt6g9Re0Wtaeove/XfMPWd2x9y+ZQ37T1XZtv2/q+zTduFrWnqN2i9hS1H30jmKEWtaeo3aL2FLVb1J6idovaU9RuUfvp20uHpqjdovYUtVvUnqJ2i9pT1G5Re4rar75pzVCL2lPUblF7itotak9Ru0XtKWq3qP32rbBDU9RuUXuK2i1qT1G7Re0pareoPUXts2+wM9Si9hS1W9SeonaL2lPUblF7itotan9829737XnjblFHijos6khRh0UdKeqwqCNFHRZ14KcBh6aow6KOFHVY1JGiDos6UtRhUUeKOkY/Y2SoRR0p6rCoI0UdFnWkqMOijhR1WNSx+8nFoSnqsKgjRR0WdaSoo5+F/DDUT0N+HFqfhzK0n4j8SNTPRH4osqgjRR0WdaSow6KO009ZDk1Rh0UdKeqwqCNFHRZ1pKjDoo4UdVz97JahFnWkqMOijhR1WNSRog6LOlLUYVHH7SdCh6aow6KOFHVY1JGiDos6UtRhUUeKOmY/Z2aoRR0p6rCoI0UdFnWkqMOijhR1WNTx+Om1H1/z+dWizhR1WtSZok6LOlPUaVFnijot6sQPxQ5NUadFnSnqtKgzRZ0Wdaao06LOFHWOftTOUIs6U9RpUWeKOi3qTFGnRZ0p6rSoc/cDvENT1GlRZ4o6LepMUadFnSnqtKgzRZ1HjwUy1KLOFHVa1Jmizp4zeNDQkwaPGnrW0MMGh3rc0PMGDxws6kxRp0WdKeq0qDNFnVePMDLUos4UdVrUmaJOizpT1GlRZ4o6Leq8PRhxaIo6LepMUadFnSnqtKgzRZ0Wdaaoc/a4JUMt6kxRp0WdKeq0qDNFnRZ1pqjTos7HQ5ye4uQYx6KuFHVZ1JWiLou6UtRlUVeKuizqwrMhh6aoy6KuFHVZ1JWiLou6UtRlUVeKukZPnDLUoq4UdVnUlaIui7pS1GVRV4q6LOraPcdyaIq6LOpKUZdFXSnqsqgrRV0WdaWo6+jpWIZa1JWiLou6UtRlUVeKuizqSlGXRV2nZ24OTVGXRV0p6uoZnod4PcXzGK/neB7krZO8DO1Znod5FnWlqMuirhR1WdSVoi6Lum7PBx2aoi6LulLUZVFXiros6kpRl0VdKeqaPXXMUIu6UtRlUVeKuizqSlGXRV0p6rKo6/Ess4eZOc20qDtF3RZ1p6jbou4UdVvUnaJui7rxiNShKeq2qDtF3RZ1p6jbou4UdVvUnaLu0YPXDLWoO0XdFnWnqNui7hR1W9Sdom6LunePcx2aom6LulPUbVF3irot6k5Rt0XdKeo+ekicoRZ1p6jbou4UdVvUnaJui7pT1G1R9+nRs0NT1G1Rd4q6LepOUbdF3Snqtqg7Rd1XD7Qz1KLuFHX3fNwD8p6Qe0TeM3IPyXtK3mNyh3pQblF3irot6k5Rt0XdKeq2qDtF3bOH7xlqUXeKui3qTlG3Rd0p6raoO0XdFnU/Hun3TD+H+hY1U9S0qJmipkXNFDUtaqaoaVETNwUOTVHTomaKmhY1U9S0qJmipkXNFDVH9w8ZalEzRU2LmilqWtRMUdOiZoqaFjV3txoOTVHTomaKmhY1U9S0qJmipkXNFDWP7koy1KJmipoWNVPUtKiZoqZFzRQ1LWqebmAcmqKmRc0UNS1qpqhpUTNFTYuaKWpe3etkqEXNFDUtaqaoaVEzRU2LmilqWtS83RY5NEXN7p5cPnX75Pqp+ycXUN1AuYJaO6gMtaiZoqZFzRQ1LWqmqGlRM0VNi5qPm62utrLbsqgnRT0W9aSox6KeFPVY1JOiHot6cGHm0BT1WNSToh6LelLUY1FPinos6klRz+gaLkMt6klRj0U9KeqxqCdFPRb1pKjHop7d5Z5DU9RjUU+KeizqSVGPRT0p6rGoJ0U9R1eGGWpRT4p6LOpJUY9FPSnqsagnRT0W9ZwuIh2aoh6LelLUY1FPinos6klRj0U9Keq5ut7MUIt6UtRjUU+KeizqSVGPRT0p6rGo53Zp6tAU9VjUk6Iei3pS1GNRT4p6LOpJUc/sKjZDu9d1sdvNrqvd7nZd7na763q3+90ueNeG1xXv2vF2ybu2vF3zrj1vF71r09tVb3e9G90gd7zr3q373s2F79aN7+bKd+vOd3Ppu3Xru7n23cbaUDu+m9/N1e/W3e/m8nfr9ndz/bt1/7u5AN66Ad72bsA73iXw1i3w5hp46x54cxG8dRO8uQreugveXAZvx9qwO7774M2F8NaN8OZKeOtOeHMpvHUrvLkW3roX3s5u8Dve1fDW3fDmcnjrdnhzPbx1P7y5IN66Id5cEW/XEgKO75Z4c028dU+8uSjeuineXBVv3RVvLou3bou3uwKh410Yb90Yb66Mt+6MN5fGW7fGm2vjrXvjzcXxNpdwcHx3x5vL463b48318db98eYCeesGeXOFvHWHvD0VFItQaChabWnGshnFGUtnlGcsn1Gg8YXQWESj44s0ltIo01hOo1BjSY1SjVZbrLG0RrnG8hoFG0tslGwss1G0sdRG2cZyG4UbS26Ubiy7Ubyx9Eb5xvIbBRxLcJRwLMNRxLEURxnHchyFHEtylHIsy1HMsTRHOcfyHAUdS3SUdCzTUdSxVEdZx3IdhR1LdpR2LNtR3LF0R3nH8h0FHkt4lHgs41HksZRHmcdyHoUeS3qUeizrUeyxtEe5x/IeBR9LfJR8LPNR9LHUR9nHch+FH0t+lH7UfiD+oPoD+Qf1HwhAqABBAkINCCIQqkCQgTCWKbTaShCkINSCIAahGgQ5CGMJqxKrL4yV45eyKrNazqrQakmrUqtWKw2hNgRxCNUhyEOoD0EgQoUIEhFqRBCJUCWCTIQ6EYQiVIogFaFWBLEI1SLIRagXQTBCxQiSEWpGEI1QNYJshLoRhCNUjiAdoXYE8QjVI8hHqB9BQEIFCRISakgQkVBFgoyEOhKEJFSSICWhlgQxCdUkyEmoJ0FQQkUJkhJqShCVUFWCrIS6EoQlVJYgLaG2BHEJ1SXIS6gvQWBChQkSE2pMEJlQZYLMhDoThCZUmiA1odaEvRa41cpNqDdBcELFCZITak4QnVB1guyEuhOEJ1SeID2h9gTxCfsSkiWSy0guJNnxZZLLSRZKLilZKtlqhShUoiBFoRYFMQrVKMhRqEdBkEJFCpIUalIQpVCVgiyFuhSEKVSmIE2hNgVxCtUpyFOoT0GgQoUKEhVqVBCpUKWCTIU6FYQqVKogVaFWBbEK1SrIVahXQbBCxQqSFWpWEK1QtYJshboVhCtUriBdoXYF8QrVK8hXqF9BwEIFCxIWalgQsVDFgoyFOhaELFSyIGWhlgUxC9UsyFmoZ0HQwrEMv9XWtCBqoaoFWQt1LQhbqGxB2kJtC+IWqluQt1DfgsCFChckLtS4IHKhygWZC3UuCF2odEHqwrGEc4nzMs5Fzl8oZ8cv51zovKRzqXOrlb1Q94LwhcoXpC/UviB+ofoF+Qv1LwhgqIBBAkMNDCIYqmCQwVAHgxCGShikMNTCIIahGgY5DPUwCGKoiEESQ00MohiqYpDFUBeDMIbKGKQx1MYgjqE6BnkM9TEIZKiQQSJDjQwiGapkkMlQJ4NQhkoZpDLUyiCWoVoGuQz1MghmqJhBMkPNDKIZqmY4e/em1QpnqJxBOkPtDOIZqmeQz1A/g4CGChokNNTQIKKhigYZDXU0CGmopEFKQy0NYhqqaZDTUE+DoIaKGiQ11NQgqqGqBlkNdTUIazjXDYVeUVh3FHpJYd1SWNcUOr4XFdZNhV5VaLUiG6pskNlQZ4PQhkobpDbU2iC2odoGuQ31NghuqLhBckPNDaIbqm6Q3VB3g/CGyhukN9TeIL6h+gb5DfU3CHCowEGCQw0OIhyqcJDhUIeDEIdKHKQ41OIgxqEaBzkO9TgIcqjIQZJDTQ6iHKpykOVQl4Mwh8ocpDlc686c1VbnIM+hPgeBDhU6SHSo0UGkQ5UOMh3qdBDqUKmDVIdaHcQ6VOsg16FeB8EOFTtIdqjZQbRD1Q6yHep2EO5QuYN0h9odxDtU7yDfoX4HAQ8VPEh4qOFBxEMVDzIernXDqFeM1h2jXjJat4x6zeiLe0aOXzeNetWo1Up6qOlB1ENVD7Ie6noQ9lDZg7SH2h7EPVT3IO+hvgeBDxU+SHyo8UHkQ5UPMh/qfBD6UOmD1IdaH8Q+VPsg96HeB8EPFT9Ifqj5QfRD1Q+yH+p+EP5Q+YP0h9ofxD9U/yD/of6Hu3ddW60EiBogREBUASEDog4IIRCVQEiBqAVCDEQ1EHIg6oEQBFERhCSImiBEQVQFIQuiLghhEJVBSIOoDUIcRHUQ8iDqgxAIUSGERIgaIURCVAkhE6JOCKEQlUJIhagVQixEtRByIeqFEAxRMYRkiJohREPc64ZgrwiuO4K9JLhuCfaa4LonuC4KdnyvCrZaAREVREiIqCFCREQVETIi6ogQElFJhJSIWiLERFQTISeinghBERVFSIqoKUJURFURsiLqihAWUVmEtIjaIsRFVBchL6K+CIERFUZIjKgxQmTEXHfUrbbOCKERlUZIjag1QmxEtRFyI+qNEBxRcYTkiJojREdUHSE7ou4I4RGVR0iPqD1CfET1EfIj6o8QIFGBhASJGiRESFQhIUOiDgkhEpVISJGoRUKMRDUSciTqkRAkUZGEJImaJERJVCUhS6IuCWESlUlIk6hNQpxEdRLyJOqTEChRoYREiblu+PaK77rj20u+65Zvr/mue7696PvFTV/Ht1q5EvVKCJaoWEKyRM0SoiWqlpAtUbeEcInKJaRL1C4hXqJ6CfkS9UsImKhgQsJEDRMiJqqYkDFRx4SQiUomnv5siVYrZqKaCTkT9UwImqhoQtJETROiJqqakDVR14SwicompE3UNiFuoroJeRP1TQicqHBC4kSNEyInqpyQOVHnhNCJSiekTtQ6IXai2gm5E/VOCJ6oeELyRM0ToieqnpA9UfeE8InKJ6RP1D4hfqL6CfkT9U8IoKiAQgJFDRQiKKqgkEFRB4UQikoopFDUQiGGohoKORT1UAiieNYN/V7RX3f0e0l/3dLvNf11T78X9ddN/XVV//P43z/9qJgPP3z3z3dvf37z7W+ffiLMr++/98e/fPzyl//+yX/ij4H66cOP37/9168f3n76UTE/r58F9fGvfxvHN+P5+++ffpzM/wA=","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u8 as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u16 as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u32 as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u64 as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"50":{"source":"use dep::std::hash::pedersen_hash;\n\nfn main(a: Field, b: Field) {\n    for i in 0..500 {\n        assert(\n            pedersen_hash([a + i as Field, b + i as Field])\n                == pedersen_hash([a + i as Field, b + i as Field]),\n        );\n    }\n}\n","path":"/Users/madztheo/Documents/Wagmi/Studio/RnD/Docaproof/noir-libs/NoirReactNative/circuits/pedersen/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint"]}