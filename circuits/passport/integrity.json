{"noir_version":"1.0.0-beta.7+24c053fba747770cf8d3f813d22cfa003714dfb6","hash":"10097745942425103983","abi":{"parameters":[{"name":"current_date","type":{"kind":"string","length":8},"visibility":"private"},{"name":"dg1","type":{"kind":"array","length":95,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signed_attributes","type":{"kind":"array","length":200,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signed_attributes_size","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"e_content","type":{"kind":"array","length":700,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"e_content_size","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"dg1_offset_in_e_content","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":25,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11312646305626880900":{"error_kind":"custom","kind":"integer","sign":"unsigned","width":32},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"55":{"source":"/**\n* The standards for passports and any other travel documents, electronic or not,\n* are defined in the ICAO (International Civil Aviation Organization) 9303 document available here: \n* https://www.icao.int/publications/pages/publication.aspx?docnum=9303\n*/\n\n/**\n* The structure of the MRZ is well defined and standardized by the ICAO\n* so the index will always be the same for every passport\n* c.f. ICAO 9303-4, Appendix B\n*/\n\n// The following constants define the indices of the information\n// we need to generate various proofs of identity from the MRZ\n// The structure of the MRZ is slightly different between passports\n// and ID cards so we need to define indices for both types\n\n// Index for the country of issuance of the passport\npub global PASSPORT_MRZ_COUNTRY_INDEX: u32 = 2;\n// Index for the three letter code of the country of citizenship\n// Note that the first three letter code (index 2) in the MRZ is the country of issuance\n// not citizenship. It is important to keep in mind for residence permits\n// where the issuing country differs from the citizenship country\npub global PASSPORT_MRZ_NATIONALITY_INDEX: u32 = 54;\n// Index for the gender of the passport holder (M, F or < if unspecified)\npub global PASSPORT_MRZ_GENDER_INDEX: u32 = 64;\n// Index for the date of expiry (YYMMDD)\npub global PASSPORT_MRZ_EXPIRY_DATE_INDEX: u32 = 65;\n// Index for the date of birth (YYMMDD) in TD1 (i.e. passport) MRZ\npub global PASSPORT_MRZ_BIRTHDATE_INDEX: u32 = 57;\n// Index for the document number in the MRZ\npub global PASSPORT_MRZ_DOCUMENT_NUMBER_INDEX: u32 = 44;\n// Index for the document type in the MRZ\npub global PASSPORT_MRZ_DOCUMENT_TYPE_INDEX: u32 = 0;\n// Index for the name of the passport holder\npub global PASSPORT_MRZ_NAME_INDEX: u32 = 5;\n// Length of the MRZ on a passport\npub global PASSPORT_MRZ_LENGTH: u32 = 88;\n\n// Index for the country of issuance of the ID card\npub global ID_CARD_MRZ_COUNTRY_INDEX: u32 = 2;\n// Note that the first three letter code (index 2) in the MRZ is the country of issuance\n// not citizenship. It is important to keep in mind for residence permits\n// where the issuing country differs from the citizenship country\npub global ID_CARD_MRZ_NATIONALITY_INDEX: u32 = 45;\n// Index for the gender of the passport holder (M, F or < if unspecified)\npub global ID_CARD_MRZ_GENDER_INDEX: u32 = 37;\n// Index for the date of expiry (YYMMDD)\npub global ID_CARD_MRZ_EXPIRY_DATE_INDEX: u32 = 38;\n// Index for the date of birth (YYMMDD) in TD3 (i.e. ID cards) MRZ\npub global ID_CARD_MRZ_BIRTHDATE_INDEX: u32 = 30;\n// Index for the document number in the MRZ\npub global ID_CARD_MRZ_DOCUMENT_NUMBER_INDEX: u32 = 5;\n// Index for the document type in the MRZ\npub global ID_CARD_MRZ_DOCUMENT_TYPE_INDEX: u32 = 0;\n// Index for the name of the passport holder\npub global ID_CARD_MRZ_NAME_INDEX: u32 = 60;\n// Length of the MRZ on an ID card\npub global ID_CARD_MRZ_LENGTH: u32 = 90;\n\n// ECDSA curves mapping\npub global ECDSA_CURVE_P256: u32 = 0;\npub global ECDSA_CURVE_P384: u32 = 1;\npub global ECDSA_CURVE_P521: u32 = 2;\npub global ECDSA_CURVE_BRAINPOOL_B256R1: u32 = 3;\npub global ECDSA_CURVE_BRAINPOOL_B256T1: u32 = 4;\npub global ECDSA_CURVE_BRAINPOOL_B384R1: u32 = 5;\npub global ECDSA_CURVE_BRAINPOOL_B384T1: u32 = 6;\npub global ECDSA_CURVE_BRAINPOOL_B512R1: u32 = 7;\npub global ECDSA_CURVE_BRAINPOOL_B512T1: u32 = 8;\n\npub struct IDData {\n    // Regroups the hashes of all the data groups plus some padding\n    // at the start and in between each data group hashes\n    pub e_content: [u8; 700],\n    pub e_content_size: u32,\n    // Where we can find e_content in the signed_attributes\n    // It varies from document to document according to the length\n    // of the padding at the start\n    pub dg1_offset_in_e_content: u32,\n    // Last 32 bytes: result of the hash of all the hashes of the data groups\n    // Rest of the bytes: information about the signature algorithm, date, etc.\n    pub signed_attributes: [u8; 200],\n    pub signed_attributes_size: u32,\n    // The DG1 contains the Machine Readable Zone (MRZ) of the document\n    // The two lines at the bottom of the passport data page\n    // or the three bottom lines on the rear of an ID card\n    // 95 bytes for passports, 93 bytes for ID cards\n    // Including 88 bytes of MRZ and 5 bytes of padding for passports\n    // and 90 bytes of MRZ and 5 bytes of padding for ID cards\n    pub dg1: [u8; 95],\n    // The signature over the data groups\n    pub sod_signature: [u8; 512],\n    pub sod_signature_size: u32,\n}\n\npub struct DSCData {\n    // The TBS certificate of the DSC\n    // TBS stands for To Be Signed\n    pub tbs_certificate: [u8; 1500],\n    pub tbs_certificate_size: u32,\n    // The public key of the DSC (up to 512 bytes to account for RSA-4096)\n    pub pubkey: [u8; 512],\n    // The actual size of the public key\n    pub pubkey_size: u32,\n    // The index of the public key in the TBS certificate\n    pub pubkey_index: u32,\n    // Data used to verify the signature\n    // Generated by the pre-compute function in Rust\n    // c.f. main.rs\n    pub pubkey_redc_param: [u8; 513],\n    // The signature over the TBS certificate\n    pub signature: [u8; 512],\n    pub signature_size: u32,\n    // The exponent of the public key\n    // Only useful for RSA, can be ignored for ECDSA\n    pub exponent: u32,\n}\n\npub struct CSCData {\n    // The public key of the CSC (up to 512 bytes to account for RSA-4096)\n    pub pubkey: [u8; 512],\n    // The actual size of the public key\n    pub pubkey_size: u32,\n    // Data used to verify the signature\n    // Generated by the pre-compute function in Rust\n    // c.f. main.rs\n    pub pubkey_redc_param: [u8; 513],\n    // Only useful for RSA, can be ignored for ECDSA\n    pub exponent: u32,\n}\n\npub struct DiscloseFlags {\n    pub issuing_country: bool,\n    pub nationality: bool,\n    pub document_type: bool,\n    pub document_number: bool,\n    pub date_of_expiry: bool,\n    pub date_of_birth: bool,\n    pub gender: bool,\n    pub name: bool,\n}\n\npub struct DisclosedData {\n    pub issuing_country: [u8; 3],\n    pub nationality: [u8; 3],\n    pub document_type: [u8; 2],\n    pub document_number: [u8; 9],\n    pub date_of_expiry: [u8; 6],\n    pub date_of_birth: [u8; 6],\n    pub name: [u8; 39],\n}\n\npub fn get_array_slice<let N: u32, let M: u32>(arr: [u8; N], start: u32, end: u32) -> [u8; M] {\n    let mut slice = [0 as u8; M];\n    for i in start..end {\n        slice[i - start] = arr[i];\n    }\n    slice\n}\n\npub fn get_array_slice_constant<let N: u32, let M: u32>(arr: [u8; N]) -> [u8; M] {\n    let mut slice = [0 as u8; M];\n    for i in 0..M {\n        slice[i] = arr[i];\n    }\n    slice\n}\n\n// Reverse the bytes of an array so you can switch from\n// big endian to little endian order and vice versa\npub fn reverse_bytes_array<let N: u32>(arr: [u8; N]) -> [u8; N] {\n    let mut reversed_arr = [0 as u8; N];\n    for i in 0..N {\n        // Reverse\n        reversed_arr[i] = arr[N - 1 - i];\n    }\n    reversed_arr\n}\n\npub fn insert_into_array<let N: u32, let M: u32>(\n    mut arr: [u8; N],\n    sub_arr: [u8; M],\n    index: u32,\n) -> [u8; N] {\n    for i in index..index + M {\n        arr[i] = sub_arr[i - index];\n    }\n    arr\n}\n\npub fn dynamic_insert_into_array<let N: u32, let M: u32>(\n    mut arr: [u8; N],\n    sub_arr: [u8; M],\n    index: u32,\n    max_size: u32,\n) -> [u8; N] {\n    for i in index..index + max_size {\n        if i - index < M {\n            arr[i] = sub_arr[i - index];\n        }\n    }\n    arr\n}\n\npub fn is_id_card(dg1: [u8; 95]) -> bool {\n    // For passport, the last two bytes are 0\n    // since the real length is 93 for passports\n    // while it is 95 for ID cards\n    (dg1[93] != 0) & (dg1[94] != 0)\n}\n\npub fn from_byte_be_to_fields<let NBytes: u32, let N: u32>(x: [u8; NBytes]) -> [Field; N] {\n    let mut result = [0 as Field; N];\n\n    let mut limb: Field = 0;\n    let mut k = 0;\n    for _j in 0..(15 - (N * 15 - NBytes)) {\n        limb *= 256;\n        limb += x[k] as Field;\n        k += 1;\n    }\n    std::as_witness(limb);\n\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: Field = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        std::as_witness(limb);\n        result[N - i - 1] = limb;\n    }\n\n    result\n}\n\npub unconstrained fn __from_byte_be_to_fields<let NBytes: u32, let N: u32>(\n    x: [u8; NBytes],\n) -> [Field; N] {\n    from_byte_be_to_fields(x)\n}\n\npub fn get_mrz_from_dg1(dg1: [u8; 95]) -> [u8; 90] {\n    let mut mrz = [0 as u8; 90];\n    for i in 0..90 {\n        mrz[i] = dg1[i + 5];\n    }\n    mrz\n}\n\npub fn split_array<let N: u32>(array: [u8; N * 2]) -> ([u8; N], [u8; N]) {\n    let mut array_x = [0 as u8; N];\n    let mut array_y = [0 as u8; N];\n    for i in 0..N {\n        array_x[i] = array[i];\n        array_y[i] = array[i + N];\n    }\n    (array_x, array_y)\n}\n\npub fn concat_array<let N: u32>(array_x: [u8; N], array_y: [u8; N]) -> [u8; N * 2] {\n    let mut array = [0 as u8; N * 2];\n    for i in 0..N {\n        array[i] = array_x[i];\n        array[i + N] = array_y[i];\n    }\n    array\n}\n\npub fn check_bytes_zero_padding<let N: u32>(padded_array: [u8; N], len: u32) {\n    for i in 0..N {\n        if i >= len {\n            assert_eq(padded_array[i], 0);\n        }\n    }\n}\n","path":"/Users/jordanbettencourt/Documents/GitHub/Noir/passport_circuits/src/noir/lib/utils/src/lib.nr"},"56":{"source":"use date::Date;\nuse utils::{\n    get_array_slice, get_mrz_from_dg1, ID_CARD_MRZ_EXPIRY_DATE_INDEX, is_id_card,\n    PASSPORT_MRZ_EXPIRY_DATE_INDEX,\n};\n\npub fn check_expiry(dg1: [u8; 95], current_date_bytes: [u8; 8], should_assert: bool) -> bool {\n    let mrz = get_mrz_from_dg1(dg1);\n\n    // We base the threshold year for the expiry date on the current date plus 20 years\n    // As most documents will have a 10 year validity (and some maybe 15 years?)\n    // So with 20 years we should be safe\n    let threshold_year = Date::from_bytes_long_year(current_date_bytes).add_years(20);\n    let threshold_year_bytes = threshold_year.to_bytes();\n\n    let current_date = Date::from_bytes_long_year(current_date_bytes);\n\n    let mut expiry_date_bytes = [0 as u8; 6];\n\n    if is_id_card(dg1) {\n        expiry_date_bytes = get_array_slice(\n            mrz,\n            ID_CARD_MRZ_EXPIRY_DATE_INDEX,\n            ID_CARD_MRZ_EXPIRY_DATE_INDEX + 6,\n        );\n    } else {\n        expiry_date_bytes = get_array_slice(\n            mrz,\n            PASSPORT_MRZ_EXPIRY_DATE_INDEX,\n            PASSPORT_MRZ_EXPIRY_DATE_INDEX + 6,\n        );\n    }\n\n    let expiry_date = Date::from_bytes_short_year(\n        expiry_date_bytes,\n        [threshold_year_bytes[2], threshold_year_bytes[3]],\n    );\n\n    let ret = current_date.lt(expiry_date);\n    if (should_assert) {\n        assert(ret);\n    }\n\n    ret\n}\n","path":"/Users/jordanbettencourt/Documents/GitHub/Noir/passport_circuits/src/noir/lib/data-check/expiry/src/lib.nr"},"57":{"source":"use dep::std::println;\n\npub struct Date {\n    day: u8,\n    month: u8,\n    year: u32,\n}\n\nfn get_number_from_utf8_code(code: u8) -> u8 {\n    assert(code >= 48 & code <= 57);\n    code - 48\n}\n\nfn number_to_utf8_code(number: u8) -> u8 {\n    assert(number >= 0 & number <= 9);\n    number + 48\n}\n\nimpl Date {\n    pub fn new(year: u32, month: u8, day: u8) -> Self {\n        assert(month >= 1 & month <= 12);\n        assert(day >= 1 & day <= 31);\n        let date = Self { day: day, month: month, year: year };\n        assert(day <= date.get_days_in_month(month));\n        date\n    }\n\n    pub fn from_bytes_short_year(date: [u8; 6], threshold_year: [u8; 2]) -> Self {\n        let firstYearDigit = get_number_from_utf8_code(date[0]);\n        let secondYearDigit = get_number_from_utf8_code(date[1]);\n\n        let mut year: u32 = firstYearDigit as u32 * 10 + secondYearDigit as u32;\n\n        let firstMonthDigit = get_number_from_utf8_code(date[2]);\n        let secondMonthDigit = get_number_from_utf8_code(date[3]);\n\n        let month = firstMonthDigit * 10 + secondMonthDigit;\n\n        let firstDayDigit = get_number_from_utf8_code(date[4]);\n        let secondDayDigit = get_number_from_utf8_code(date[5]);\n\n        let day = firstDayDigit * 10 + secondDayDigit;\n\n        let currentYearFirstDigit = get_number_from_utf8_code(threshold_year[0]);\n        let currentYearSecondDigit = get_number_from_utf8_code(threshold_year[1]);\n\n        let mut currentYear: u32 =\n            currentYearFirstDigit as u32 * 10 + currentYearSecondDigit as u32;\n\n        // This way we have a smooth 100 years period according to a threshold year\n        // Taking the current year as threshold year (for birthdates for example)\n        // if the current year is 2023, then 24 will be interpreted as 1924\n        // while 22 will be interpreted as 2022\n        // A bit problematic for people over 100 years old\n        if year <= currentYear {\n            year += 2000;\n        } else {\n            year += 1900;\n        }\n\n        Self { day: day, month: month, year: year }\n    }\n\n    pub fn from_bytes_long_year(date: [u8; 8]) -> Self {\n        let firstYearDigit = get_number_from_utf8_code(date[0]);\n        let secondYearDigit = get_number_from_utf8_code(date[1]);\n        let thirdYearDigit = get_number_from_utf8_code(date[2]);\n        let fourthYearDigit = get_number_from_utf8_code(date[3]);\n\n        let year: u32 = firstYearDigit as u32 * 1000\n            + secondYearDigit as u32 * 100\n            + thirdYearDigit as u32 * 10\n            + fourthYearDigit as u32;\n\n        let firstMonthDigit = get_number_from_utf8_code(date[4]);\n        let secondMonthDigit = get_number_from_utf8_code(date[5]);\n\n        let month = firstMonthDigit * 10 + secondMonthDigit;\n\n        let firstDayDigit = get_number_from_utf8_code(date[6]);\n        let secondDayDigit = get_number_from_utf8_code(date[7]);\n\n        let day = firstDayDigit * 10 + secondDayDigit;\n\n        Self { day: day, month: month, year: year }\n    }\n\n    pub fn from_str_short_year(date: str<6>, threshold_year: str<2>) -> Self {\n        let date_bytes = date.as_bytes();\n        Date::from_bytes_short_year(date_bytes, threshold_year.as_bytes())\n    }\n\n    pub fn from_str_long_year(date: str<8>) -> Self {\n        let date_bytes = date.as_bytes();\n        Date::from_bytes_long_year(date_bytes)\n    }\n\n    pub fn get_duration_in_days(self: Self, other: Self, absolute: bool) -> i64 {\n        let mut duration_years = self.get_duration_between_years(other);\n        let mut duration_months = self.get_duration_between_months(other);\n        let mut duration_days = self.day as i64 - other.day as i64;\n        if (self.year < other.year) {\n            if (other.is_leap_year() & other.month > 2 & self.month > 2) {\n                duration_days -= 1;\n            }\n        } else if (self.year > other.year) {\n            if (self.is_leap_year() & self.month > 2 & other.month > 2) {\n                duration_days += 1;\n            }\n        }\n        let totalDuration: i64 = duration_years + duration_months + duration_days;\n\n        if (totalDuration < 0) & absolute {\n            -1 * totalDuration\n        } else {\n            totalDuration\n        }\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.get_duration_in_days(other, false) > 0\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.get_duration_in_days(other, false) < 0\n    }\n\n    pub fn eq(self: Self, other: Self) -> bool {\n        (self.day == other.day) & (self.month == other.month) & (self.year == other.year)\n    }\n\n    pub fn ne(self: Self, other: Self) -> bool {\n        !self.eq(other)\n    }\n\n    pub fn gte(self: Self, other: Self) -> bool {\n        self.get_duration_in_days(other, false) >= 0\n    }\n\n    pub fn lte(self: Self, other: Self) -> bool {\n        self.get_duration_in_days(other, false) <= 0\n    }\n\n    pub fn println(self: Self) {\n        let year = self.year;\n        let month = self.month;\n        let day = self.day;\n        // Let's write the date in the YYYY-MM-DD format\n        // since people don't agree on which format is best\n        // between MM/DD/YYYY and DD/MM/YYYY\n        if (month < 10) & (day < 10) {\n            println(f\"Date: {year}-0{month}-0{day}\");\n        } else if month < 10 {\n            println(f\"Date: {year}-0{month}-{day}\");\n        } else if day < 10 {\n            println(f\"Date: {year}-{month}-0{day}\");\n        } else {\n            println(f\"Date: {year}-{month}-{day}\");\n        }\n    }\n\n    pub fn to_bytes(self: Self) -> [u8; 8] {\n        let mut date: [u8; 8] = [0; 8];\n\n        let firstYearDigit = self.year / 1000;\n        let secondYearDigit = (self.year - firstYearDigit * 1000) / 100;\n        let thirdYearDigit = (self.year - firstYearDigit * 1000 - secondYearDigit * 100) / 10;\n        let fourthYearDigit =\n            self.year - firstYearDigit * 1000 - secondYearDigit * 100 - thirdYearDigit * 10;\n\n        date[0] = number_to_utf8_code(firstYearDigit as u8);\n        date[1] = number_to_utf8_code(secondYearDigit as u8);\n        date[2] = number_to_utf8_code(thirdYearDigit as u8);\n        date[3] = number_to_utf8_code(fourthYearDigit as u8);\n\n        let firstMonthDigit = self.month / 10;\n        let secondMonthDigit = self.month - firstMonthDigit * 10;\n\n        date[4] = number_to_utf8_code(firstMonthDigit as u8);\n        date[5] = number_to_utf8_code(secondMonthDigit as u8);\n\n        let firstDayDigit = self.day / 10;\n        let secondDayDigit = self.day - firstDayDigit * 10;\n\n        date[6] = number_to_utf8_code(firstDayDigit as u8);\n        date[7] = number_to_utf8_code(secondDayDigit as u8);\n\n        date\n    }\n\n    pub fn is_leap_year(self: Self) -> bool {\n        ((self.year % 4 == 0) & (self.year % 100 != 0)) | (self.year % 400 == 0)\n    }\n\n    pub fn leap_year_count(year: u32) -> i32 {\n        (year / 4) as i32 - (year / 100) as i32 + (year / 400) as i32\n    }\n\n    pub fn get_days_in_month(self: Self, month: u8) -> u8 {\n        assert(month >= 1 & month <= 12);\n        if month == 2 {\n            if self.is_leap_year() {\n                29\n            } else {\n                28\n            }\n        } else {\n            if (month == 1)\n                | (month == 3)\n                | (month == 5)\n                | (month == 7)\n                | (month == 8)\n                | (month == 10)\n                | (month == 12) {\n                31\n            } else {\n                30\n            }\n        }\n    }\n\n    pub fn get_duration_between_months(self: Self, other: Self) -> i64 {\n        assert(self.month >= 1 & self.month <= 12);\n        assert(other.month >= 1 & other.month <= 12);\n        let mut duration: i64 = 0;\n        if (self.month < other.month) {\n            for month in 1..13 {\n                if month >= self.month & month < other.month {\n                    duration -= other.get_days_in_month(month) as i64;\n                }\n            }\n        } else {\n            for month in 1..13 {\n                if month >= other.month & month < self.month {\n                    duration += self.get_days_in_month(month) as i64;\n                }\n            }\n        }\n        duration\n    }\n\n    pub fn get_duration_between_years(self: Self, other: Self) -> i64 {\n        let mut duration: i64 = 0;\n        if (self.year < other.year) {\n            let mut leap_year_count: i32 =\n                Date::leap_year_count(other.year - 1) - Date::leap_year_count(self.year);\n            if self.is_leap_year() {\n                leap_year_count += 1;\n            }\n            duration -= leap_year_count as i64 * 366;\n            duration -=\n                (other.year as i64 - self.year as i64 - leap_year_count as i64) as i64 * 365;\n        } else if (self.year > other.year) {\n            let mut leap_year_count: i32 =\n                Date::leap_year_count(self.year - 1) - Date::leap_year_count(other.year);\n            if other.is_leap_year() {\n                leap_year_count += 1;\n            }\n            duration += leap_year_count as i64 * 366;\n            duration +=\n                (self.year as i64 - other.year as i64 - leap_year_count as i64) as i64 * 365;\n        }\n        duration\n    }\n\n    pub fn add_years(self: Self, years: u32) -> Self {\n        Self { day: self.day, month: self.month, year: self.year + years }\n    }\n\n    pub fn sub_years(self: Self, years: u32) -> Self {\n        Self { day: self.day, month: self.month, year: self.year - years }\n    }\n\n    pub fn add_months(self: Self, months: u32) -> Self {\n        let mut newMonth = self.month as u32 + months;\n        let mut newYear = self.year;\n        let yearToAdd = (newMonth - 1) / 12;\n        if newMonth > 12 {\n            newYear += yearToAdd as u32;\n            newMonth -= 12 * yearToAdd;\n        }\n        Self { day: self.day, month: newMonth as u8, year: newYear }\n    }\n\n    pub fn sub_months(self: Self, months: u32) -> Self {\n        let mut newMonth = self.month as i32 - months as i32;\n        let mut newYear = self.year;\n        if newMonth < 1 {\n            let yearToSub = ((newMonth as i32 - 12 as i32) * -1) / 12;\n            newYear -= yearToSub as u32;\n            newMonth += 12 * yearToSub;\n        }\n        Self { day: self.day, month: newMonth as u8, year: newYear }\n    }\n\n    pub fn add_days(self: Self, days: u32) -> Self {\n        let mut newDay = self.day as u32 + days;\n        let mut newMonth = self.month as u32;\n        let mut newYear = self.year;\n        let mut date = Self { day: newDay as u8, month: newMonth as u8, year: newYear };\n        if newDay > self.get_days_in_month(self.month) as u32 {\n            let max_months = (newDay / 30) + 1;\n            let bound = self.month + max_months as u8;\n            for _ in self.month..bound {\n                let days_in_month = date.get_days_in_month(newMonth as u8) as u32;\n                if newDay > days_in_month {\n                    newDay -= days_in_month;\n                    newMonth += 1;\n                    if newMonth > 12 {\n                        newYear += 1;\n                        newMonth = 1;\n                    }\n                    // We need to mutate the date object inside the loop\n                    // so we can use get_days_in_month properly\n                    date.day = newDay as u8;\n                    date.year = newYear;\n                    date.month = newMonth as u8;\n                }\n            }\n        }\n        date\n    }\n\n    // Performance could be improved\n    pub fn sub_days(self: Self, days: u32) -> Self {\n        let mut newDay = self.day as i32 - days as i32;\n        let mut newMonth = self.month as i32;\n        let mut newYear = self.year;\n        let mut date = Self { day: newDay as u8, month: newMonth as u8, year: newYear };\n        if newDay < 1 {\n            let max_months = (self.day as u32 + days) / 30 + 1;\n            let bound = self.month + max_months as u8;\n            for _ in self.month..bound {\n                let days_in_month = date.get_days_in_month(newMonth as u8) as i32;\n                if newDay < 1 {\n                    newDay += days_in_month;\n                    newMonth -= 1;\n                    if newMonth < 1 {\n                        newYear -= 1;\n                        newMonth = 12;\n                    }\n                    // We need to mutate the date object inside the loop\n                    // so we can use get_days_in_month properly\n                    date.day = newDay as u8;\n                    date.year = newYear;\n                    date.month = newMonth as u8;\n                }\n            }\n        }\n        date\n    }\n}\n\n#[test]\nfn test_date_init() {\n    let date = Date::new(2023, 12, 19);\n\n    assert(date.day == 19);\n    assert(date.month == 12);\n    assert(date.year == 2023);\n}\n\n#[test]\nfn test_date_from_bytes_short_year() {\n    let date = Date::from_bytes_short_year([50, 51, 49, 50, 49, 57], [50, 52]);\n\n    assert(date.day == 19);\n    assert(date.month == 12);\n    assert(date.year == 2023);\n}\n\n#[test]\nfn test_date_from_bytes_long_year() {\n    let date = Date::from_bytes_long_year([50, 48, 50, 51, 49, 50, 49, 57]);\n\n    assert(date.day == 19);\n    assert(date.month == 12);\n    assert(date.year == 2023);\n}\n\n#[test]\nfn test_date_from_str_short_year() {\n    let date = Date::from_str_short_year(\"231219\", \"24\");\n\n    assert(date.day == 19);\n    assert(date.month == 12);\n    assert(date.year == 2023);\n}\n\n#[test]\nfn test_date_from_str_long_year() {\n    let date = Date::from_str_long_year(\"20231219\");\n\n    assert(date.day == 19);\n    assert(date.month == 12);\n    assert(date.year == 2023);\n}\n\n#[test]\nfn test_date_to_bytes() {\n    let date = Date::new(2023, 12, 19);\n\n    let date_bytes = date.to_bytes();\n\n    assert(date_bytes[0] == 50);\n    assert(date_bytes[1] == 48);\n    assert(date_bytes[2] == 50);\n    assert(date_bytes[3] == 51);\n    assert(date_bytes[4] == 49);\n    assert(date_bytes[5] == 50);\n    assert(date_bytes[6] == 49);\n    assert(date_bytes[7] == 57);\n}\n\n#[test]\nfn test_date_is_leap_year() {\n    let date = Date::new(2023, 12, 19);\n\n    assert(date.is_leap_year() == false);\n\n    let date = Date::new(2024, 12, 19);\n\n    assert(date.is_leap_year() == true);\n}\n\n#[test]\nfn test_date_get_days_in_month() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(date.get_days_in_month(1) == 31);\n    assert(date.get_days_in_month(2) == 28);\n    assert(date.get_days_in_month(3) == 31);\n    assert(date.get_days_in_month(4) == 30);\n    assert(date.get_days_in_month(5) == 31);\n    assert(date.get_days_in_month(6) == 30);\n    assert(date.get_days_in_month(7) == 31);\n    assert(date.get_days_in_month(8) == 31);\n    assert(date.get_days_in_month(9) == 30);\n    assert(date.get_days_in_month(10) == 31);\n    assert(date.get_days_in_month(11) == 30);\n    assert(date.get_days_in_month(12) == 31);\n\n    let date = Date::new(2024, 1, 1);\n\n    assert(date.get_days_in_month(1) == 31);\n    assert(date.get_days_in_month(2) == 29);\n    assert(date.get_days_in_month(3) == 31);\n    assert(date.get_days_in_month(4) == 30);\n    assert(date.get_days_in_month(5) == 31);\n    assert(date.get_days_in_month(6) == 30);\n    assert(date.get_days_in_month(7) == 31);\n    assert(date.get_days_in_month(8) == 31);\n    assert(date.get_days_in_month(9) == 30);\n    assert(date.get_days_in_month(10) == 31);\n    assert(date.get_days_in_month(11) == 30);\n    assert(date.get_days_in_month(12) == 31);\n}\n\n#[test]\nfn test_date_get_duration_between_months() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(Date::new(2023, 1, 1).get_duration_between_months(date) == 0);\n    assert(Date::new(2023, 2, 1).get_duration_between_months(date) == 31);\n    assert(Date::new(2023, 3, 1).get_duration_between_months(date) == 59);\n    assert(Date::new(2023, 4, 1).get_duration_between_months(date) == 90);\n    assert(Date::new(2023, 5, 1).get_duration_between_months(date) == 120);\n    assert(Date::new(2023, 6, 1).get_duration_between_months(date) == 151);\n    assert(Date::new(2023, 7, 1).get_duration_between_months(date) == 181);\n    assert(Date::new(2023, 8, 1).get_duration_between_months(date) == 212);\n    assert(Date::new(2023, 9, 1).get_duration_between_months(date) == 243);\n    assert(Date::new(2023, 10, 1).get_duration_between_months(date) == 273);\n    assert(Date::new(2023, 11, 1).get_duration_between_months(date) == 304);\n    assert(Date::new(2023, 12, 1).get_duration_between_months(date) == 334);\n}\n\n#[test]\nfn test_date_get_duration_between_years() {\n    let date = Date::new(2023, 1, 1);\n\n    // Positive duration\n    assert(Date::new(2023, 1, 1).get_duration_between_years(date) == 0);\n    assert(Date::new(2024, 1, 1).get_duration_between_years(date) == 365);\n    assert(Date::new(2025, 1, 1).get_duration_between_years(date) == 731);\n    assert(Date::new(2026, 1, 1).get_duration_between_years(date) == 1096);\n    assert(Date::new(2027, 1, 1).get_duration_between_years(date) == 1461);\n    assert(Date::new(2028, 1, 1).get_duration_between_years(date) == 1826);\n    assert(Date::new(2029, 1, 1).get_duration_between_years(date) == 2192);\n    assert(Date::new(2030, 1, 1).get_duration_between_years(date) == 2557);\n    assert(Date::new(2031, 1, 1).get_duration_between_years(date) == 2922);\n    assert(Date::new(2032, 1, 1).get_duration_between_years(date) == 3287);\n    assert(Date::new(2033, 1, 1).get_duration_between_years(date) == 3653);\n    assert(Date::new(2034, 1, 1).get_duration_between_years(date) == 4018);\n\n    // Negative duration\n    assert(Date::new(2022, 1, 1).get_duration_between_years(date) == -365);\n    assert(Date::new(2021, 1, 1).get_duration_between_years(date) == -730);\n    assert(Date::new(2020, 1, 1).get_duration_between_years(date) == -1096);\n    assert(Date::new(2019, 1, 1).get_duration_between_years(date) == -1461);\n    assert(Date::new(2018, 1, 1).get_duration_between_years(date) == -1826);\n    assert(Date::new(2017, 1, 1).get_duration_between_years(date) == -2191);\n    assert(Date::new(2016, 1, 1).get_duration_between_years(date) == -2557);\n    assert(Date::new(2015, 1, 1).get_duration_between_years(date) == -2922);\n    assert(Date::new(2014, 1, 1).get_duration_between_years(date) == -3287);\n    assert(Date::new(2013, 1, 1).get_duration_between_years(date) == -3652);\n    assert(Date::new(2012, 1, 1).get_duration_between_years(date) == -4018);\n}\n\n#[test]\nfn test_date_get_duration_in_days() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(Date::new(2023, 1, 1).get_duration_in_days(date, false) == 0);\n    assert(Date::new(2023, 1, 15).get_duration_in_days(date, false) == 14);\n    assert(Date::new(2023, 2, 1).get_duration_in_days(date, false) == 31);\n    assert(Date::new(2023, 2, 15).get_duration_in_days(date, false) == 45);\n    assert(Date::new(2023, 3, 1).get_duration_in_days(date, false) == 59);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(date, false) == 364);\n    assert(Date::new(2024, 1, 1).get_duration_in_days(date, false) == 365);\n    assert(Date::new(2024, 2, 28).get_duration_in_days(date, false) == 365 + 31 + 27);\n    assert(Date::new(2024, 2, 29).get_duration_in_days(date, false) == 365 + 31 + 28);\n    assert(Date::new(2024, 3, 1).get_duration_in_days(date, false) == 365 + 31 + 29);\n    assert(Date::new(2024, 12, 31).get_duration_in_days(date, false) == 365 + 365);\n    assert(Date::new(2025, 1, 1).get_duration_in_days(date, false) == 365 + 366);\n\n    assert(Date::new(2017, 6, 18).get_duration_in_days(Date::new(2000, 1, 1), false) == 6378);\n    assert(Date::new(2179, 6, 6).get_duration_in_days(Date::new(2000, 1, 1), false) == 0xffff);\n    assert(Date::new(2019, 6, 6).get_duration_in_days(Date::new(2000, 1, 1), false) == 7096);\n    assert(Date::new(2001, 1, 1).get_duration_in_days(Date::new(2000, 12, 31), false) == 1);\n    assert(Date::new(2001, 1, 1).get_duration_in_days(Date::new(2000, 12, 31), false) == 1);\n    assert(Date::new(2001, 1, 1).get_duration_in_days(Date::new(2000, 1, 1), false) == 366);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 0);\n    assert(Date::new(2023, 1, 15).get_duration_in_days(Date::new(2023, 1, 1), false) == 14);\n    assert(Date::new(2023, 2, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 31);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2023, 1, 1), false) == 364);\n    assert(Date::new(2024, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 365);\n    assert(Date::new(2024, 1, 1).get_duration_in_days(Date::new(2020, 1, 1), false) == 1461);\n    assert(Date::new(2024, 1, 1).get_duration_in_days(Date::new(2020, 3, 1), false) == 1401);\n    assert(Date::new(2024, 12, 31).get_duration_in_days(Date::new(2023, 12, 31), false) == 366);\n    assert(Date::new(2028, 12, 31).get_duration_in_days(Date::new(2023, 12, 31), false) == 1827);\n    assert(Date::new(2029, 12, 31).get_duration_in_days(Date::new(2023, 12, 31), false) == 2192);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2022, 1, 1), false) == 365);\n    assert(Date::new(2025, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 731);\n    assert(Date::new(2026, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 1096);\n    assert(Date::new(2030, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 2557);\n    assert(Date::new(2023, 6, 15).get_duration_in_days(Date::new(2023, 1, 1), false) == 165);\n    assert(Date::new(2023, 12, 25).get_duration_in_days(Date::new(2023, 6, 15), false) == 193);\n    assert(Date::new(2024, 2, 29).get_duration_in_days(Date::new(2023, 12, 31), false) == 60);\n    assert(Date::new(2025, 3, 15).get_duration_in_days(Date::new(2023, 9, 1), false) == 561);\n    assert(Date::new(2050, 2, 4).get_duration_in_days(Date::new(2000, 1, 1), false) == 18297);\n    assert(Date::new(2171, 9, 9).get_duration_in_days(Date::new(2000, 1, 1), false) == 62708);\n    assert(Date::new(2142, 2, 24).get_duration_in_days(Date::new(2000, 1, 1), false) == 51919);\n    assert(Date::new(2091, 12, 23).get_duration_in_days(Date::new(2000, 1, 1), false) == 33594);\n    assert(Date::new(2169, 2, 14).get_duration_in_days(Date::new(2000, 1, 1), false) == 61771);\n    assert(Date::new(2038, 11, 12).get_duration_in_days(Date::new(2000, 1, 1), false) == 14195);\n    assert(Date::new(2129, 7, 11).get_duration_in_days(Date::new(2000, 1, 1), false) == 47308);\n    assert(Date::new(2112, 9, 16).get_duration_in_days(Date::new(2000, 1, 1), false) == 41166);\n    assert(Date::new(2109, 7, 23).get_duration_in_days(Date::new(2000, 1, 1), false) == 40015);\n    assert(Date::new(2101, 12, 18).get_duration_in_days(Date::new(2000, 1, 1), false) == 37241);\n    assert(Date::new(2150, 1, 7).get_duration_in_days(Date::new(2000, 1, 1), false) == 54793);\n    assert(Date::new(2179, 9, 15).get_duration_in_days(Date::new(2000, 1, 1), false) == 65636);\n    assert(Date::new(2038, 1, 30).get_duration_in_days(Date::new(2000, 1, 1), false) == 13909);\n    assert(Date::new(2154, 7, 4).get_duration_in_days(Date::new(2000, 1, 1), false) == 56432);\n    assert(Date::new(2010, 10, 27).get_duration_in_days(Date::new(2000, 1, 1), false) == 3952);\n    assert(Date::new(2194, 9, 4).get_duration_in_days(Date::new(2000, 1, 1), false) == 71104);\n    assert(Date::new(2014, 7, 23).get_duration_in_days(Date::new(2000, 1, 1), false) == 5317);\n    assert(Date::new(2118, 12, 17).get_duration_in_days(Date::new(2000, 1, 1), false) == 43449);\n    assert(Date::new(2116, 9, 27).get_duration_in_days(Date::new(2000, 1, 1), false) == 42638);\n    assert(Date::new(2091, 9, 25).get_duration_in_days(Date::new(2000, 1, 1), false) == 33505);\n    assert(Date::new(2147, 11, 15).get_duration_in_days(Date::new(2000, 1, 1), false) == 54009);\n    assert(Date::new(2130, 7, 30).get_duration_in_days(Date::new(2000, 1, 1), false) == 47692);\n    assert(Date::new(2031, 12, 18).get_duration_in_days(Date::new(2000, 1, 1), false) == 11674);\n    assert(Date::new(2092, 1, 30).get_duration_in_days(Date::new(2000, 1, 1), false) == 33632);\n    assert(Date::new(2111, 7, 14).get_duration_in_days(Date::new(2000, 1, 1), false) == 40736);\n    assert(Date::new(2089, 11, 10).get_duration_in_days(Date::new(2000, 1, 1), false) == 32821);\n    assert(Date::new(2022, 10, 26).get_duration_in_days(Date::new(2000, 1, 1), false) == 8334);\n    assert(Date::new(2159, 7, 19).get_duration_in_days(Date::new(2000, 1, 1), false) == 58273);\n    assert(Date::new(2164, 8, 25).get_duration_in_days(Date::new(2000, 1, 1), false) == 60137);\n    assert(Date::new(2079, 4, 13).get_duration_in_days(Date::new(2000, 1, 1), false) == 28957);\n\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2017, 6, 18), false) == -6378);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2179, 6, 6), false) == -0xffff);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2019, 6, 6), false) == -7096);\n    assert(Date::new(2000, 12, 31).get_duration_in_days(Date::new(2001, 1, 1), false) == -1);\n    assert(Date::new(2000, 12, 31).get_duration_in_days(Date::new(2001, 1, 1), false) == -1);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2001, 1, 1), false) == -366);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 0);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 1, 15), false) == -14);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 2, 1), false) == -31);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 12, 31), false) == -364);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2024, 1, 1), false) == -365);\n    assert(Date::new(2020, 1, 1).get_duration_in_days(Date::new(2024, 1, 1), false) == -1461);\n    assert(Date::new(2020, 3, 1).get_duration_in_days(Date::new(2024, 1, 1), false) == -1401);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2024, 12, 31), false) == -366);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2028, 12, 31), false) == -1827);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2029, 12, 31), false) == -2192);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2022, 10, 26), false) == -8334);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2159, 7, 19), false) == -58273);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2164, 8, 25), false) == -60137);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2079, 4, 13), false) == -28957);\n\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2017, 6, 18), true) == 6378);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2179, 6, 6), true) == 0xffff);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2019, 6, 6), true) == 7096);\n    assert(Date::new(2000, 12, 31).get_duration_in_days(Date::new(2001, 1, 1), true) == 1);\n    assert(Date::new(2000, 12, 31).get_duration_in_days(Date::new(2001, 1, 1), true) == 1);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2001, 1, 1), true) == 366);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), true) == 0);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 1, 15), true) == 14);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 2, 1), true) == 31);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 12, 31), true) == 364);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2024, 1, 1), true) == 365);\n    assert(Date::new(2020, 1, 1).get_duration_in_days(Date::new(2024, 1, 1), true) == 1461);\n    assert(Date::new(2020, 3, 1).get_duration_in_days(Date::new(2024, 1, 1), true) == 1401);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2024, 12, 31), true) == 366);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2028, 12, 31), true) == 1827);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2029, 12, 31), true) == 2192);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2022, 10, 26), true) == 8334);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2159, 7, 19), true) == 58273);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2164, 8, 25), true) == 60137);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2079, 4, 13), true) == 28957);\n}\n\n#[test]\nfn test_date_eq() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(date.eq(Date::new(2023, 1, 1)));\n    assert(!date.eq(Date::new(2023, 1, 2)));\n}\n\n#[test]\nfn test_date_ne() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(!date.ne(Date::new(2023, 1, 1)));\n    assert(date.ne(Date::new(2023, 1, 2)));\n}\n\n#[test]\nfn test_date_gt() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(!date.gt(Date::new(2023, 1, 1)));\n    assert(!date.gt(Date::new(2023, 1, 2)));\n    assert(date.gt(Date::new(2022, 12, 31)));\n}\n\n#[test]\nfn test_date_lt() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(!date.lt(Date::new(2023, 1, 1)));\n    assert(!date.lt(Date::new(2022, 12, 31)));\n    assert(date.lt(Date::new(2023, 1, 2)));\n}\n\n#[test]\nfn test_date_gte() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(date.gte(Date::new(2023, 1, 1)));\n    assert(!date.gte(Date::new(2023, 1, 2)));\n    assert(date.gte(Date::new(2022, 12, 31)));\n}\n\n#[test]\nfn test_date_lte() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(date.lte(Date::new(2023, 1, 1)));\n    assert(!date.lte(Date::new(2022, 12, 31)));\n    assert(date.lte(Date::new(2023, 1, 2)));\n}\n\n#[test]\nfn test_date_add_years() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.add_years(0).eq(Date::new(2023, 7, 14)));\n    assert(date.add_years(1).eq(Date::new(2024, 7, 14)));\n    assert(date.add_years(2).eq(Date::new(2025, 7, 14)));\n    assert(date.add_years(3).eq(Date::new(2026, 7, 14)));\n    assert(date.add_years(4).eq(Date::new(2027, 7, 14)));\n    assert(date.add_years(5).eq(Date::new(2028, 7, 14)));\n}\n\n#[test]\nfn test_date_sub_years() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.sub_years(0).eq(Date::new(2023, 7, 14)));\n    assert(date.sub_years(1).eq(Date::new(2022, 7, 14)));\n    assert(date.sub_years(2).eq(Date::new(2021, 7, 14)));\n    assert(date.sub_years(3).eq(Date::new(2020, 7, 14)));\n    assert(date.sub_years(4).eq(Date::new(2019, 7, 14)));\n    assert(date.sub_years(5).eq(Date::new(2018, 7, 14)));\n}\n\n#[test]\nfn test_date_add_months() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.add_months(0).eq(Date::new(2023, 7, 14)));\n    assert(date.add_months(1).eq(Date::new(2023, 8, 14)));\n    assert(date.add_months(2).eq(Date::new(2023, 9, 14)));\n\n    assert(date.add_months(6).eq(Date::new(2024, 1, 14)));\n    assert(date.add_months(7).eq(Date::new(2024, 2, 14)));\n    assert(date.add_months(8).eq(Date::new(2024, 3, 14)));\n\n    assert(date.add_months(17).eq(Date::new(2024, 12, 14)));\n    assert(date.add_months(18).eq(Date::new(2025, 1, 14)));\n\n    assert(date.add_months(29).eq(Date::new(2025, 12, 14)));\n    assert(date.add_months(30).eq(Date::new(2026, 1, 14)));\n}\n\n#[test]\nfn test_date_sub_months() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.sub_months(0).eq(Date::new(2023, 7, 14)));\n    assert(date.sub_months(1).eq(Date::new(2023, 6, 14)));\n    assert(date.sub_months(2).eq(Date::new(2023, 5, 14)));\n\n    assert(date.sub_months(6).eq(Date::new(2023, 1, 14)));\n    assert(date.sub_months(7).eq(Date::new(2022, 12, 14)));\n    assert(date.sub_months(8).eq(Date::new(2022, 11, 14)));\n\n    assert(date.sub_months(17).eq(Date::new(2022, 2, 14)));\n    assert(date.sub_months(18).eq(Date::new(2022, 1, 14)));\n    assert(date.sub_months(19).eq(Date::new(2021, 12, 14)));\n\n    assert(date.sub_months(30).eq(Date::new(2021, 1, 14)));\n    assert(date.sub_months(31).eq(Date::new(2020, 12, 14)));\n\n    assert(date.sub_months(41).eq(Date::new(2020, 2, 14)));\n    assert(date.sub_months(42).eq(Date::new(2020, 1, 14)));\n    assert(date.sub_months(43).eq(Date::new(2019, 12, 14)));\n}\n\n#[test]\nfn test_date_add_days() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.add_days(0).eq(Date::new(2023, 7, 14)));\n    assert(date.add_days(1).eq(Date::new(2023, 7, 15)));\n    assert(date.add_days(2).eq(Date::new(2023, 7, 16)));\n\n    assert(date.add_days(17).eq(Date::new(2023, 7, 31)));\n    assert(date.add_days(18).eq(Date::new(2023, 8, 1)));\n    assert(date.add_days(19).eq(Date::new(2023, 8, 2)));\n\n    assert(date.add_days(31).eq(Date::new(2023, 8, 14)));\n    assert(date.add_days(32).eq(Date::new(2023, 8, 15)));\n    assert(date.add_days(33).eq(Date::new(2023, 8, 16)));\n\n    assert(date.add_days(365).eq(Date::new(2024, 7, 13)));\n    assert(date.add_days(366).eq(Date::new(2024, 7, 14)));\n    assert(date.add_days(367).eq(Date::new(2024, 7, 15)));\n\n    assert(date.add_days(365 + 365).eq(Date::new(2025, 7, 13)));\n    assert(date.add_days(365 + 366).eq(Date::new(2025, 7, 14)));\n    assert(date.add_days(365 + 367).eq(Date::new(2025, 7, 15)));\n\n    assert(date.add_days(365 + 366 + 364).eq(Date::new(2026, 7, 13)));\n    assert(date.add_days(365 + 366 + 365).eq(Date::new(2026, 7, 14)));\n    assert(date.add_days(365 + 366 + 366).eq(Date::new(2026, 7, 15)));\n\n    // After 4 regular years and 2 leap years\n    assert(date.add_days(365 * 4 + 366 * 2 - 1).eq(Date::new(2029, 7, 13)));\n    assert(date.add_days(365 * 4 + 366 * 2).eq(Date::new(2029, 7, 14)));\n    assert(date.add_days(365 * 4 + 366 * 2 + 1).eq(Date::new(2029, 7, 15)));\n}\n\n#[test]\nfn test_date_sub_days() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.sub_days(0).eq(Date::new(2023, 7, 14)));\n    assert(date.sub_days(1).eq(Date::new(2023, 7, 13)));\n    assert(date.sub_days(2).eq(Date::new(2023, 7, 12)));\n\n    assert(date.sub_days(17).eq(Date::new(2023, 6, 28)));\n    assert(date.sub_days(18).eq(Date::new(2023, 6, 27)));\n    assert(date.sub_days(19).eq(Date::new(2023, 6, 26)));\n\n    assert(date.sub_days(31).eq(Date::new(2023, 6, 14)));\n    assert(date.sub_days(32).eq(Date::new(2023, 6, 13)));\n    assert(date.sub_days(33).eq(Date::new(2023, 6, 12)));\n\n    assert(date.sub_days(365).eq(Date::new(2022, 7, 14)));\n    assert(date.sub_days(366).eq(Date::new(2022, 7, 13)));\n    assert(date.sub_days(367).eq(Date::new(2022, 7, 12)));\n\n    assert(date.sub_days(365 + 365).eq(Date::new(2021, 7, 14)));\n    assert(date.sub_days(365 + 366).eq(Date::new(2021, 7, 13)));\n    assert(date.sub_days(365 + 367).eq(Date::new(2021, 7, 12)));\n\n    assert(date.sub_days(365 + 365 + 365).eq(Date::new(2020, 7, 14)));\n    assert(date.sub_days(365 + 365 + 366).eq(Date::new(2020, 7, 13)));\n    assert(date.sub_days(365 + 365 + 367).eq(Date::new(2020, 7, 12)));\n\n    // After 5 regular years and 1 leap year\n    assert(date.sub_days(365 * 5 + 366 - 1).eq(Date::new(2017, 7, 15)));\n    assert(date.sub_days(365 * 5 + 366).eq(Date::new(2017, 7, 14)));\n    assert(date.sub_days(365 * 5 + 366 + 1).eq(Date::new(2017, 7, 13)));\n\n    // After 6 regular years and 2 leap years\n    assert(date.sub_days(365 * 6 + 366 * 2 - 1).eq(Date::new(2015, 7, 15)));\n    assert(date.sub_days(365 * 6 + 366 * 2).eq(Date::new(2015, 7, 14)));\n    assert(date.sub_days(365 * 6 + 366 * 2 + 1).eq(Date::new(2015, 7, 13)));\n}\n\n#[test]\nfn test_date_age() {\n    let birthdate = Date::new(1995, 4, 13);\n\n    // Add 18 years to the birthdate\n    // to get the date when the person is 18 years old\n    let majority_date = birthdate.add_years(18);\n\n    // Make sure the majority date is correct\n    assert(majority_date.eq(Date::new(2013, 4, 13)));\n\n    // Compare the majority date to the current date\n    // to see if the person is 18 years old\n    assert(majority_date.lte(Date::new(2023, 12, 20)));\n}\n","path":"/Users/jordanbettencourt/nargo/github.com/madztheo/noir-date.git/v0.4.5/src/lib.nr"},"58":{"source":"use sha1::sha1;\nuse sha256;\nuse sha512::{sha384, sha512};\nuse utils::is_id_card;\n\n/**\n* Computes the hash of the MRZ (Data Group 1) and checks it is the same as the one\n* provided in the SOD file of the ID and then use it along with the rest of the\n* hashes of the remaining data groups to compute the final hash contained in the last 32 bytes of\n* eContent that is then signed by the Document Signing Certificate (DSC)\n* This lets us make sure the data is authentic and has not been tampered with, so we can use the data\n* of the MRZ to build subsequent proofs (age, citizenship, etc.)\n*/\npub fn check_dg1_sha1(\n    dg1: [u8; 95],\n    e_content: [u8; 700],\n    dg1_offset_in_e_content: u32,\n    should_assert: bool,\n) -> bool {\n    // For passports we ignore the last padding characters\n    let mut dg1_size: u64 = 93;\n\n    // If it's an ID card then the array should not have any padding\n    // character\n    if is_id_card(dg1) {\n        dg1_size = 95;\n    }\n\n    let mut ret = true;\n\n    let dg1_bounded_vec = BoundedVec::from_parts(dg1, dg1_size as u32);\n    // We only need to recompute the hash of the MRZ (or more accurately that of Data Group 1)\n    // within the circuit as this is the only data group we use to build the proof (age, country, etc.)\n    let dg1_hash = sha1::sha1_var(dg1_bounded_vec);\n\n    for i in 0..20 {\n        // Check the hash of dg1 is indeed in the e_content\n        let tmp = dg1_hash[i] == e_content[dg1_offset_in_e_content + i];\n        if (should_assert) {\n            assert(tmp);\n        }\n        ret = ret & tmp;\n    }\n\n    ret\n}\n\npub fn check_dg1_sha256(\n    dg1: [u8; 95],\n    e_content: [u8; 700],\n    dg1_offset_in_e_content: u32,\n    should_assert: bool,\n) -> bool {\n    // For passports we ignore the last padding characters\n    let mut dg1_size: u64 = 93;\n\n    // If it's an ID card then the array should not have any padding\n    // character\n    if is_id_card(dg1) {\n        dg1_size = 95;\n    }\n\n    let mut ret = true;\n\n    // We only need to recompute the hash of the MRZ (or more accurately that of Data Group 1)\n    // within the circuit as this is the only data group we use to build the proof (age, country, etc.)\n    let dg1_hash = sha256::sha256_var(dg1, dg1_size as u64);\n\n    for i in 0..32 {\n        // Check the hash of dg1 is indeed in the e_content\n        let tmp = dg1_hash[i] == e_content[dg1_offset_in_e_content + i];\n        if (should_assert) {\n            assert(tmp);\n        }\n        ret = ret & tmp;\n    }\n\n    ret\n}\n\npub fn check_dg1_sha384(\n    dg1: [u8; 95],\n    e_content: [u8; 700],\n    dg1_offset_in_e_content: u32,\n    should_assert: bool,\n) -> bool {\n    // For passports we ignore the last padding characters\n    let mut dg1_size: u64 = 93;\n\n    // If it's an ID card then the array should not have any padding\n    // character\n    if is_id_card(dg1) {\n        dg1_size = 95;\n    }\n\n    let mut ret = true;\n\n    let dg1_bounded_vec = BoundedVec::from_parts(dg1, dg1_size as u32);\n    // We only need to recompute the hash of the MRZ (or more accurately that of Data Group 1)\n    // within the circuit as this is the only data group we use to build the proof (age, country, etc.)\n    let dg1_hash = sha384::sha384_var(dg1_bounded_vec);\n\n    for i in 0..48 {\n        // Check the hash of dg1 is indeed in the e_content\n        let tmp = dg1_hash[i] == e_content[dg1_offset_in_e_content + i];\n        if (should_assert) {\n            assert(tmp);\n        }\n        ret = ret & tmp;\n    }\n\n    ret\n}\n\npub fn check_dg1_sha512(\n    dg1: [u8; 95],\n    e_content: [u8; 700],\n    dg1_offset_in_e_content: u32,\n    should_assert: bool,\n) -> bool {\n    // For passports we ignore the last padding characters\n    let mut dg1_size: u64 = 93;\n\n    // If it's an ID card then the array should not have any padding\n    // character\n    if is_id_card(dg1) {\n        dg1_size = 95;\n    }\n\n    let mut ret = true;\n\n    let dg1_bounded_vec = BoundedVec::from_parts(dg1, dg1_size as u32);\n    // We only need to recompute the hash of the MRZ (or more accurately that of Data Group 1)\n    // within the circuit as this is the only data group we use to build the proof (age, country, etc.)\n    let dg1_hash = sha512::sha512_var(dg1_bounded_vec);\n\n    for i in 0..64 {\n        // Check the hash of dg1 is indeed in the e_content\n        let tmp = dg1_hash[i] == e_content[dg1_offset_in_e_content + i];\n        if (should_assert) {\n            assert(tmp);\n        }\n        ret = ret & tmp;\n    }\n\n    ret\n}\n\npub fn check_signed_attributes_sha1(\n    signed_attributes: [u8; 200],\n    signed_attributes_size: u32,\n    e_content: [u8; 700],\n    e_content_size: u32,\n    should_assert: bool,\n) -> bool {\n    let mut ret = true;\n\n    let computed_final_hash = sha1::sha1_var(BoundedVec::from_parts(e_content, e_content_size));\n\n    for i in 0..20 {\n        // The last 20 bytes of the signed_attributes are the hash of the data groups\n        // The rest is padding and the signature date, not important to check\n        let tmp = computed_final_hash[i] == signed_attributes[signed_attributes_size - 20 + i];\n        if (should_assert) {\n            assert(tmp, i);\n        }\n        ret = ret & tmp;\n    }\n\n    ret\n}\n\npub fn check_signed_attributes_sha256(\n    signed_attributes: [u8; 200],\n    signed_attributes_size: u32,\n    e_content: [u8; 700],\n    e_content_size: u32,\n    should_assert: bool,\n) -> bool {\n    let mut ret = true;\n\n    let computed_final_hash = sha256::sha256_var(e_content, e_content_size as u64);\n\n    for i in 0..32 {\n        // The last 32 bytes of the signed_attributes are the hash of the data groups\n        // The rest is padding and the signature date, not important to check\n        let tmp = computed_final_hash[i] == signed_attributes[signed_attributes_size - 32 + i];\n        if (should_assert) {\n            assert(tmp, i);\n        }\n        ret = ret & tmp;\n    }\n\n    ret\n}\n\npub fn check_signed_attributes_sha384(\n    signed_attributes: [u8; 200],\n    signed_attributes_size: u32,\n    e_content: [u8; 700],\n    e_content_size: u32,\n    should_assert: bool,\n) -> bool {\n    let mut ret = true;\n\n    let computed_final_hash = sha384::sha384_var(BoundedVec::from_parts(e_content, e_content_size));\n\n    for i in 0..48 {\n        // The last 48 bytes of the signed_attributes are the hash of the data groups\n        // The rest is padding and the signature date, not important to check\n        let tmp = computed_final_hash[i] == signed_attributes[signed_attributes_size - 48 + i];\n        if (should_assert) {\n            assert(tmp, i);\n        }\n        ret = ret & tmp;\n    }\n\n    ret\n}\n\npub fn check_signed_attributes_sha512(\n    signed_attributes: [u8; 200],\n    signed_attributes_size: u32,\n    e_content: [u8; 700],\n    e_content_size: u32,\n    should_assert: bool,\n) -> bool {\n    let mut ret = true;\n\n    let computed_final_hash = sha512::sha512_var(BoundedVec::from_parts(e_content, e_content_size));\n\n    for i in 0..64 {\n        // The last 64 bytes of the signed_attributes are the hash of the data groups\n        // The rest is padding and the signature date, not important to check\n        let tmp = computed_final_hash[i] == signed_attributes[signed_attributes_size - 64 + i];\n        if (should_assert) {\n            assert(tmp, i);\n        }\n        ret = ret & tmp;\n    }\n\n    ret\n}\n\npub fn check_integrity_of_data(\n    dg1: [u8; 95],\n    signed_attributes: [u8; 200],\n    signed_attributes_size: u32,\n    e_content: [u8; 700],\n    e_content_size: u32,\n    dg1_offset_in_e_content: u32,\n    dg1_hash_algorithm: str<6>,\n    signed_attributes_hash_algorithm: str<6>,\n    should_assert: bool,\n) -> bool {\n    // For passports we ignore the last padding characters\n    let mut dg1_size: u64 = 93;\n\n    // If it's an ID card then the array should not have any padding\n    // character\n    if is_id_card(dg1) {\n        dg1_size = 95;\n    }\n\n    let mut ret = true;\n\n    // DG1 Hash Verification\n    {\n        if dg1_hash_algorithm == \"sha1<<\" {\n            let dg1_bounded_vec = BoundedVec::from_parts(dg1, dg1_size as u32);\n            // We only need to recompute the hash of the MRZ (or more accurately that of Data Group 1)\n            // within the circuit as this is the only data group we use to build the proof (age, country, etc.)\n            let dg1_hash = sha1::sha1_var(dg1_bounded_vec);\n\n            for i in 0..20 {\n                // Check the hash of dg1 is indeed in the e_content\n                let tmp = dg1_hash[i] == e_content[dg1_offset_in_e_content + i];\n                if (should_assert) {\n                    assert(tmp);\n                }\n                ret = ret & tmp;\n            }\n        } else if dg1_hash_algorithm == \"sha256\" {\n            // We only need to recompute the hash of the MRZ (or more accurately that of Data Group 1)\n            // within the circuit as this is the only data group we use to build the proof (age, country, etc.)\n            let dg1_hash = sha256::sha256_var(dg1, dg1_size as u64);\n\n            for i in 0..32 {\n                // Check the hash of dg1 is indeed in the e_content\n                let tmp = dg1_hash[i] == e_content[dg1_offset_in_e_content + i];\n                if (should_assert) {\n                    assert(tmp);\n                }\n                ret = ret & tmp;\n            }\n        } else if (dg1_hash_algorithm == \"sha384\") {\n            let dg1_bounded_vec = BoundedVec::from_parts(dg1, dg1_size as u32);\n            // We only need to recompute the hash of the MRZ (or more accurately that of Data Group 1)\n            // within the circuit as this is the only data group we use to build the proof (age, country, etc.)\n            let dg1_hash = sha384::sha384_var(dg1_bounded_vec);\n\n            for i in 0..48 {\n                // Check the hash of dg1 is indeed in the e_content\n                let tmp = dg1_hash[i] == e_content[dg1_offset_in_e_content + i];\n                if (should_assert) {\n                    assert(tmp);\n                }\n                ret = ret & tmp;\n            }\n        } else if (dg1_hash_algorithm == \"sha512\") {\n            let dg1_bounded_vec = BoundedVec::from_parts(dg1, dg1_size as u32);\n            // We only need to recompute the hash of the MRZ (or more accurately that of Data Group 1)\n            // within the circuit as this is the only data group we use to build the proof (age, country, etc.)\n            let dg1_hash = sha512::sha512_var(dg1_bounded_vec);\n\n            for i in 0..64 {\n                // Check the hash of dg1 is indeed in the e_content\n                let tmp = dg1_hash[i] == e_content[dg1_offset_in_e_content + i];\n                if (should_assert) {\n                    assert(tmp);\n                }\n                ret = ret & tmp;\n            }\n        }\n    }\n\n    // Signed Attributes Hash Verification\n    {\n        if signed_attributes_hash_algorithm == \"sha1<<\" {\n            let computed_final_hash =\n                sha1::sha1_var(BoundedVec::from_parts(e_content, e_content_size));\n\n            for i in 0..20 {\n                // The last 20 bytes of the signed_attributes are the hash of the data groups\n                // The rest is padding and the signature date, not important to check\n                let tmp =\n                    computed_final_hash[i] == signed_attributes[signed_attributes_size - 20 + i];\n                if (should_assert) {\n                    assert(tmp, i);\n                }\n                ret = ret & tmp;\n            }\n        } else if signed_attributes_hash_algorithm == \"sha256\" {\n            let computed_final_hash = sha256::sha256_var(e_content, e_content_size as u64);\n\n            for i in 0..32 {\n                // The last 32 bytes of the signed_attributes are the hash of the data groups\n                // The rest is padding and the signature date, not important to check\n                let tmp =\n                    computed_final_hash[i] == signed_attributes[signed_attributes_size - 32 + i];\n                if (should_assert) {\n                    assert(tmp, i);\n                }\n                ret = ret & tmp;\n            }\n        } else if signed_attributes_hash_algorithm == \"sha384\" {\n            let computed_final_hash =\n                sha384::sha384_var(BoundedVec::from_parts(e_content, e_content_size));\n\n            for i in 0..48 {\n                // The last 48 bytes of the signed_attributes are the hash of the data groups\n                // The rest is padding and the signature date, not important to check\n                let tmp =\n                    computed_final_hash[i] == signed_attributes[signed_attributes_size - 48 + i];\n                if (should_assert) {\n                    assert(tmp, i);\n                }\n                ret = ret & tmp;\n            }\n        } else if signed_attributes_hash_algorithm == \"sha512\" {\n            let computed_final_hash =\n                sha512::sha512_var(BoundedVec::from_parts(e_content, e_content_size));\n\n            for i in 0..64 {\n                // The last 64 bytes of the signed_attributes are the hash of the data groups\n                // The rest is padding and the signature date, not important to check\n                let tmp =\n                    computed_final_hash[i] == signed_attributes[signed_attributes_size - 64 + i];\n                if (should_assert) {\n                    assert(tmp, i);\n                }\n                ret = ret & tmp;\n            }\n        }\n    }\n\n    ret\n}\n","path":"/Users/jordanbettencourt/Documents/GitHub/Noir/passport_circuits/src/noir/lib/data-check/integrity/src/lib.nr"},"69":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\npub(crate) mod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let int_input = (block_input + INT_SIZE - 1) / INT_SIZE;\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\n#[inline_always]\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    msg_block[INT_SIZE_PTR] = (len_bytes[0] as u32) << 24\n        | (len_bytes[1] as u32) << 16\n        | (len_bytes[2] as u32) << 8\n        | (len_bytes[3] as u32);\n\n    msg_block[INT_SIZE_PTR + 1] = (len_bytes[4] as u32) << 24\n        | (len_bytes[5] as u32) << 16\n        | (len_bytes[6] as u32) << 8\n        | (len_bytes[7] as u32);\n\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        // Safety: test function\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/Users/jordanbettencourt/nargo/github.com/noir-lang/sha256/v0.1.4/src/sha256.nr"},"82":{"source":"use data_check_expiry::check_expiry;\nuse data_check_integrity::{check_dg1_sha256, check_signed_attributes_sha256};\nuse utils::{\n    get_array_slice, get_mrz_from_dg1, ID_CARD_MRZ_COUNTRY_INDEX, ID_CARD_MRZ_DOCUMENT_NUMBER_INDEX,\n    is_id_card, PASSPORT_MRZ_COUNTRY_INDEX, PASSPORT_MRZ_DOCUMENT_NUMBER_INDEX,\n};\n\n// Write compare_sig that takes in dg1, addr (public), and the sig (signature of the document number from the mrz in the dg1)\n// Base it off of Jack's ECDSA signature checker circuit\nfn main(\n    current_date: str<8>,\n    dg1: [u8; 95],\n    signed_attributes: [u8; 200],\n    signed_attributes_size: u32,\n    e_content: [u8; 700],\n    e_content_size: u32,\n    dg1_offset_in_e_content: u32,\n) -> pub [u8; 25] {\n    let hash_algorithms = \"sha256sha256\".as_bytes();\n\n    // Check the ID is not expired first\n    let mut valid = check_expiry(dg1, current_date.as_bytes(), false);\n    // Check the integrity of the data\n    valid = valid & check_dg1_sha256(dg1, e_content, dg1_offset_in_e_content, false);\n    valid = valid\n        & check_signed_attributes_sha256(\n            signed_attributes,\n            signed_attributes_size,\n            e_content,\n            e_content_size,\n            false,\n        );\n\n    let mrz = get_mrz_from_dg1(dg1);\n    let mut issuing_country = [0 as u8; 3];\n    let mut document_number = [0 as u8; 9];\n    if is_id_card(dg1) {\n        issuing_country = get_array_slice(\n            mrz,\n            ID_CARD_MRZ_COUNTRY_INDEX,\n            ID_CARD_MRZ_COUNTRY_INDEX + 3,\n        );\n        document_number = get_array_slice(\n            mrz,\n            ID_CARD_MRZ_DOCUMENT_NUMBER_INDEX,\n            ID_CARD_MRZ_DOCUMENT_NUMBER_INDEX + 9,\n        );\n    } else {\n        issuing_country = get_array_slice(\n            mrz,\n            PASSPORT_MRZ_COUNTRY_INDEX,\n            PASSPORT_MRZ_COUNTRY_INDEX + 3,\n        );\n        document_number = get_array_slice(\n            mrz,\n            PASSPORT_MRZ_DOCUMENT_NUMBER_INDEX,\n            PASSPORT_MRZ_DOCUMENT_NUMBER_INDEX + 9,\n        );\n    }\n\n    let mut ret = [0 as u8; 25];\n    for i in 0..12 {\n        ret[i] = hash_algorithms[i];\n    }\n    for i in 0..3 {\n        ret[i + 12] = issuing_country[i];\n    }\n    for i in 0..9 {\n        ret[i + 15] = document_number[i];\n    }\n    ret[24] = if valid { 1 } else { 0 };\n\n    ret\n}\n\n#[test]\nfn test_main() {\n    // Not sure if dg1 is correct format. I padded 5 bytes at the start and replaced the two \"_\" characters with 0 bytes at the end.\n    // This seems like the correct way to h andle things. See utils/src/lib.nr:85 for more details.\n    // This dg1 is pulled from the \"mrz\" entry in the Prover.mock.toml file and padded with 0 bytes.\n    let current_date = \"20241228\"; // yyyyMMdd\n    let dg1 = [\n        97, 91, 95, 31, 88, 80, 79, 67, 72, 78, 83, 72, 73, 60, 60, 74, 73, 78, 60, 60, 60, 60, 60,\n        60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n        60, 60, 60, 69, 65, 52, 54, 48, 54, 51, 49, 56, 50, 67, 72, 78, 57, 49, 48, 57, 48, 49, 48,\n        77, 50, 55, 48, 54, 49, 53, 53, 77, 75, 75, 80, 76, 78, 80, 73, 60, 60, 60, 60, 65, 57, 49,\n        52, 0, 0,\n    ];\n    let signed_attributes = [\n        49, 105, 48, 24, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 3, 49, 11, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 7, 1, 48, 28, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 5, 49, 15, 23, 13, 49, 55,\n        48, 54, 49, 54, 48, 51, 50, 53, 53, 48, 90, 48, 47, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9,\n        4, 49, 34, 4, 32, 71, 237, 37, 185, 225, 152, 216, 49, 203, 200, 175, 243, 5, 137, 247, 126,\n        102, 22, 111, 158, 37, 214, 118, 167, 88, 56, 236, 24, 231, 61, 71, 173, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ];\n    let signed_attributes_size = 107;\n    let e_content = [\n        48, 129, 216, 2, 1, 0, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 48, 129, 195,\n        48, 37, 2, 1, 1, 4, 32, 181, 220, 114, 0, 252, 135, 45, 174, 187, 68, 179, 177, 242, 195,\n        74, 180, 35, 122, 57, 18, 88, 139, 209, 149, 127, 230, 207, 19, 217, 163, 35, 228, 48, 37,\n        2, 1, 2, 4, 32, 173, 166, 26, 166, 96, 154, 130, 77, 185, 101, 246, 249, 96, 180, 25, 155,\n        82, 186, 239, 100, 241, 194, 234, 45, 200, 68, 19, 134, 239, 217, 240, 181, 48, 37, 2, 1,\n        11, 4, 32, 201, 140, 12, 48, 88, 27, 116, 253, 6, 128, 82, 113, 213, 182, 6, 189, 129, 0,\n        46, 157, 187, 129, 228, 189, 121, 160, 127, 184, 141, 3, 191, 210, 48, 37, 2, 1, 12, 4, 32,\n        174, 75, 186, 1, 91, 57, 29, 248, 158, 227, 54, 92, 140, 24, 79, 252, 249, 187, 126, 130,\n        90, 48, 7, 123, 115, 135, 114, 120, 151, 78, 122, 40, 48, 37, 2, 1, 15, 4, 32, 18, 77, 65,\n        189, 173, 229, 165, 15, 36, 154, 103, 62, 62, 11, 81, 117, 115, 112, 3, 218, 135, 121, 249,\n        14, 64, 5, 51, 104, 200, 23, 47, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ];\n    let e_content_size = 219;\n    let dg1_offset_in_e_content = 31;\n\n    assert(\n        main(\n            current_date,\n            dg1,\n            signed_attributes,\n            signed_attributes_size,\n            e_content,\n            e_content_size,\n            dg1_offset_in_e_content,\n        )\n            == [\n                115, 104, 97, 50, 53, 54, 115, 104, 97, 50, 53, 54, 67, 72, 78, 69, 65, 52, 54, 48,\n                54, 51, 49, 56, 1,\n            ],\n    );\n}\n","path":"/Users/jordanbettencourt/Documents/GitHub/Noir/passport_circuits/src/noir/bin/main/integrity/sha256_sha256/src/main.nr"}},"names":["main"],"brillig_names":["build_msg_block","attach_len_to_msg_block","build_msg_block","directive_integer_quotient","directive_invert","directive_to_radix"]}