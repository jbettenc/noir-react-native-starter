{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":2779063795486619843,"abi":{"parameters":[{"name":"current_date","type":{"kind":"string","length":8},"visibility":"public"},{"name":"dg1","type":{"kind":"array","length":95,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signed_attributes","type":{"kind":"array","length":200,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signed_attributes_size","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"e_content","type":{"kind":"array","length":700,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"e_content_size","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"dg1_offset_in_e_content","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"document_number_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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Rq1MuFfmwcrEVVemZrEy1nXTW1cmr7ky+0981BxpK0crY13vvXVlrGvJt66Md536zpVZtAZOW4w/rcxQKC19boV0a7DU8NHwLTWOg3VftMJ+97rnRev3t6/7oruDZ6/7R2Ny/+d2cH/Pi+493r7ui+5s3r7u+V73Z6z7Zy91bwQf3d+X3ZW9ed2X3fO9ed2X3VG+ed3v/ep71v3er75l3cu9X33Put/71Wese4uffYKWjtb93q++Z93v/ep71j3f6/6Wdb/3q09Z95I/170dPEda7v3qe9b93q++Z93v/ep71v3er75l3eu9X33Put/71aes+/g44lX6drTu9371Pet+71ffs+75Xve3rPu9X33GuvdQP9c9pYN1v/er71n3e7/6nnW/96vvWfd7v/qWdW/3fvU9637vV9+z7vd+9S39mXbvV9+z7vle93c8P9Pu/ep71t17vyqMHA3tE2n33ul73/k4Pr/ztYgfz2N8nvnYwlFNc++d3rLu/d47vWfd773Te9b93js9Yd3LVj6f1dvaQV7t997pPeue73V/y7rfe6dnrHv41PWWkNrBut+zvves+z3re8+63/vV99zf7/3qW+r34b1fFd2l4b3rU/TL7p36x114J+nqS7z1j5tHDjEfLOSym6HZC5nvhfzOQob800LWAwn4WHa7Mnshl91/zF7IZTcUsxdy2R3CP7iQaftpIRV5Hp91cB5HT+mMZXcIb133tC070Xrzui870XruurfwuSg9Hqz7vSt7z7rfm7j3rHu+133+upctxc/OWz66v99bxPes+72jfM+63xvQ96z7vV99yrqPz6fsw0F3P233fvUt6x7u/ep71v3er75n3VetZ/YJ1ue653qwMqtWHHplrGuC9nFeM5beD+hfm1nTR4VVUj7Aee1byTXOa+/D+aO/UPI4woleOMkLJ3vhvLYnUcKPJ2RKyQep7cUvApc4zQune+EMK5wXv5Ra4gQvnOiFk7xwsheO1105ed2Vk9ddOXndlZPXXTl73ZWz1105e92Vs9ddOXvdlbPXXTl73ZWz1105e92Vs9dd+cUv1Grlxw+XHtoBTvDCiV44yQsne+EUL5zqhdO8cLoXzrDCqV535ep1V65ed+XqdVeuXnfl6nVXrl535ep1V36x7rqXj+HgiGq02X6SubbemvjxLbePM7hbHgeT0Bc7pt8b7IvF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","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"use crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\n#[deprecated(\"keccak256 is being deprecated from the stdlib, use https://github.com/noir-lang/keccak256 instead\")]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        let input = \"Hello world!\".as_bytes();\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n\n    #[test]\n    fn hash_longer_than_136_bytes() {\n        let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n            .as_bytes();\n        assert(input.len() > 136);\n\n        let result = [\n            0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n            0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55,\n            0xe4, 0x40,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n}\n","path":"std/hash/keccak.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"26":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// docs:start:sha256\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    // Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        // Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        // Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        // Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"61":{"source":"use compare_sig::compare_sig;\nuse data_check_expiry::check_expiry;\nuse data_check_integrity::check_integrity_of_data;\n\n// Write compare_sig that takes in dg1, addr (public), and the sig (signature of the document number from the mrz in the dg1)\n// Base it off of Jack's ECDSA signature checker circuit\nfn main(\n    current_date: pub str<8>,\n    dg1: [u8; 95],\n    signed_attributes: [u8; 200],\n    signed_attributes_size: u32,\n    e_content: [u8; 700],\n    e_content_size: u32,\n    dg1_offset_in_e_content: u32,\n    pub_key_x: pub [u8; 32],\n    pub_key_y: pub [u8; 32],\n    document_number_hash: pub [u8; 32],\n    signature: pub [u8; 64],\n) {\n    // Check the ID is not expired first\n    check_expiry(dg1, current_date.as_bytes());\n    // Check the integrity of the data\n    check_integrity_of_data(\n        dg1,\n        signed_attributes,\n        signed_attributes_size,\n        e_content,\n        e_content_size,\n        dg1_offset_in_e_content,\n    );\n    // Verify the doc code hash of the dg1 against the signature\n    compare_sig(dg1, pub_key_x, pub_key_y, document_number_hash, signature);\n}\n\n#[test]\nfn test_main() {\n    // Not sure if dg1 is correct format. I padded 5 bytes at the start and replaced the two \"_\" characters with 0 bytes at the end.\n    // This seems like the correct way to h andle things. See utils/src/lib.nr:85 for more details.\n    // This dg1 is pulled from the \"mrz\" entry in the Prover.mock.toml file and padded with 0 bytes.\n    let current_date = \"20241228\"; // yyyyMMdd\n    let dg1 = [\n        97, 91, 95, 31, 88, 80, 79, 67, 72, 78, 83, 72, 73, 60, 60, 74, 73, 78, 60, 60, 60, 60, 60,\n        60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n        60, 60, 60, 69, 65, 52, 54, 48, 54, 51, 49, 56, 50, 67, 72, 78, 57, 49, 48, 57, 48, 49, 48,\n        77, 50, 55, 48, 54, 49, 53, 53, 77, 75, 75, 80, 76, 78, 80, 73, 60, 60, 60, 60, 65, 57, 49,\n        52, 0, 0,\n    ];\n    let signed_attributes = [\n        49, 105, 48, 24, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 3, 49, 11, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 7, 1, 48, 28, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 5, 49, 15, 23, 13, 49, 55,\n        48, 54, 49, 54, 48, 51, 50, 53, 53, 48, 90, 48, 47, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9,\n        4, 49, 34, 4, 32, 71, 237, 37, 185, 225, 152, 216, 49, 203, 200, 175, 243, 5, 137, 247, 126,\n        102, 22, 111, 158, 37, 214, 118, 167, 88, 56, 236, 24, 231, 61, 71, 173, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ];\n    let signed_attributes_size = 107;\n    let e_content = [\n        48, 129, 216, 2, 1, 0, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 48, 129, 195,\n        48, 37, 2, 1, 1, 4, 32, 181, 220, 114, 0, 252, 135, 45, 174, 187, 68, 179, 177, 242, 195,\n        74, 180, 35, 122, 57, 18, 88, 139, 209, 149, 127, 230, 207, 19, 217, 163, 35, 228, 48, 37,\n        2, 1, 2, 4, 32, 173, 166, 26, 166, 96, 154, 130, 77, 185, 101, 246, 249, 96, 180, 25, 155,\n        82, 186, 239, 100, 241, 194, 234, 45, 200, 68, 19, 134, 239, 217, 240, 181, 48, 37, 2, 1,\n        11, 4, 32, 201, 140, 12, 48, 88, 27, 116, 253, 6, 128, 82, 113, 213, 182, 6, 189, 129, 0,\n        46, 157, 187, 129, 228, 189, 121, 160, 127, 184, 141, 3, 191, 210, 48, 37, 2, 1, 12, 4, 32,\n        174, 75, 186, 1, 91, 57, 29, 248, 158, 227, 54, 92, 140, 24, 79, 252, 249, 187, 126, 130,\n        90, 48, 7, 123, 115, 135, 114, 120, 151, 78, 122, 40, 48, 37, 2, 1, 15, 4, 32, 18, 77, 65,\n        189, 173, 229, 165, 15, 36, 154, 103, 62, 62, 11, 81, 117, 115, 112, 3, 218, 135, 121, 249,\n        14, 64, 5, 51, 104, 200, 23, 47, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ];\n    let e_content_size = 219;\n    let dg1_offset_in_e_content = 31;\n\n    let pub_key_x = [\n        63, 85, 200, 101, 179, 88, 186, 24, 128, 112, 30, 188, 58, 112, 119, 97, 106, 142, 190, 148,\n        106, 208, 6, 103, 12, 9, 123, 90, 178, 40, 104, 232,\n    ];\n    let pub_key_y = [\n        2, 85, 152, 84, 7, 54, 210, 225, 120, 101, 145, 178, 115, 182, 91, 115, 14, 77, 189, 152,\n        228, 197, 115, 72, 192, 253, 100, 220, 229, 255, 37, 252,\n    ];\n    let document_number_hash = [\n        115, 157, 191, 110, 166, 189, 241, 13, 127, 9, 30, 234, 58, 167, 193, 234, 239, 156, 223,\n        167, 82, 234, 202, 36, 193, 51, 75, 104, 22, 131, 4, 242,\n    ];\n    let signature = [\n        70, 1, 42, 31, 30, 243, 130, 38, 88, 192, 95, 142, 243, 161, 3, 226, 222, 192, 29, 100, 231,\n        235, 21, 39, 220, 180, 216, 253, 241, 52, 168, 131, 40, 86, 162, 10, 31, 27, 47, 49, 125,\n        153, 72, 116, 60, 191, 187, 232, 210, 113, 125, 228, 218, 242, 222, 56, 13, 96, 136, 60,\n        252, 85, 182, 104,\n    ];\n    main(\n        current_date,\n        dg1,\n        signed_attributes,\n        signed_attributes_size,\n        e_content,\n        e_content_size,\n        dg1_offset_in_e_content,\n        pub_key_x,\n        pub_key_y,\n        document_number_hash,\n        signature,\n    );\n}\n","path":"/Users/jordanbettencourt/Documents/GitHub/Noir/passport_circuits/src/noir/bin/main/integrity_sig/src/main.nr"},"62":{"source":"use dep::std;\nuse utils::{\n    get_array_slice, get_mrz_from_dg1, ID_CARD_MRZ_DOCUMENT_NUMBER_INDEX, is_id_card,\n    PASSPORT_MRZ_DOCUMENT_NUMBER_INDEX,\n};\n\npub fn compare_sig(\n    dg1: [u8; 95],\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    document_number_hash: [u8; 32],\n    signature: [u8; 64],\n) {\n    let mrz = get_mrz_from_dg1(dg1);\n\n    let mut document_number = [0 as u8; 9];\n\n    if is_id_card(dg1) {\n        document_number = get_array_slice(\n            mrz,\n            ID_CARD_MRZ_DOCUMENT_NUMBER_INDEX,\n            ID_CARD_MRZ_DOCUMENT_NUMBER_INDEX + 9,\n        );\n    } else {\n        document_number = get_array_slice(\n            mrz,\n            PASSPORT_MRZ_DOCUMENT_NUMBER_INDEX,\n            PASSPORT_MRZ_DOCUMENT_NUMBER_INDEX + 9,\n        );\n    }\n\n    // println(document_number);\n\n    let mut padded_document_number = [0; 32];\n    for i in 0..9 {\n        padded_document_number[23 + i] = document_number[i];\n    }\n\n    let digest = std::hash::keccak256(padded_document_number, 32);\n\n    // println(digest);\n    assert(document_number_hash == digest);\n\n    let valid_signature = std::ecdsa_secp256k1::verify_signature(\n        pub_key_x,\n        pub_key_y,\n        signature,\n        padded_document_number,\n    );\n    assert(valid_signature);\n}\n","path":"/Users/jordanbettencourt/Documents/GitHub/Noir/passport_circuits/src/noir/lib/compare/sig/src/lib.nr"},"63":{"source":"/**\n* The standards for passports and any other travel documents, electronic or not,\n* are defined in the ICAO (International Civil Aviation Organization) 9303 document available here: \n* https://www.icao.int/publications/pages/publication.aspx?docnum=9303\n*/\n\n/**\n* The structure of the MRZ is well defined and standardized by the ICAO\n* so the index will always be the same for every passport\n* c.f. ICAO 9303-4, Appendix B\n*/\n\n// The following constants define the indices of the information\n// we need to generate various proofs of identity from the MRZ\n// The structure of the MRZ is slightly different between passports\n// and ID cards so we need to define indices for both types\n\n// Index for the country of issuance of the passport\npub global PASSPORT_MRZ_COUNTRY_INDEX: u32 = 2;\n// Index for the three letter code of the country of citizenship\n// Note that the first three letter code (index 2) in the MRZ is the country of issuance\n// not citizenship. It is important to keep in mind for residence permits\n// where the issuing country differs from the citizenship country\npub global PASSPORT_MRZ_NATIONALITY_INDEX: u32 = 54;\n// Index for the gender of the passport holder (M, F or < if unspecified)\npub global PASSPORT_MRZ_GENDER_INDEX: u32 = 64;\n// Index for the date of expiry (YYMMDD)\npub global PASSPORT_MRZ_EXPIRY_DATE_INDEX: u32 = 65;\n// Index for the date of birth (YYMMDD) in TD1 (i.e. passport) MRZ\npub global PASSPORT_MRZ_BIRTHDATE_INDEX: u32 = 57;\n// Index for the document number in the MRZ\npub global PASSPORT_MRZ_DOCUMENT_NUMBER_INDEX: u32 = 44;\n// Index for the document type in the MRZ\npub global PASSPORT_MRZ_DOCUMENT_TYPE_INDEX: u32 = 0;\n// Index for the name of the passport holder\npub global PASSPORT_MRZ_NAME_INDEX: u32 = 5;\n// Length of the MRZ on a passport\npub global PASSPORT_MRZ_LENGTH: u32 = 88;\n\n// Index for the country of issuance of the ID card\npub global ID_CARD_MRZ_COUNTRY_INDEX: u32 = 2;\n// Note that the first three letter code (index 2) in the MRZ is the country of issuance\n// not citizenship. It is important to keep in mind for residence permits\n// where the issuing country differs from the citizenship country\npub global ID_CARD_MRZ_NATIONALITY_INDEX: u32 = 45;\n// Index for the gender of the passport holder (M, F or < if unspecified)\npub global ID_CARD_MRZ_GENDER_INDEX: u32 = 37;\n// Index for the date of expiry (YYMMDD)\npub global ID_CARD_MRZ_EXPIRY_DATE_INDEX: u32 = 38;\n// Index for the date of birth (YYMMDD) in TD3 (i.e. ID cards) MRZ\npub global ID_CARD_MRZ_BIRTHDATE_INDEX: u32 = 30;\n// Index for the document number in the MRZ\npub global ID_CARD_MRZ_DOCUMENT_NUMBER_INDEX: u32 = 5;\n// Index for the document type in the MRZ\npub global ID_CARD_MRZ_DOCUMENT_TYPE_INDEX: u32 = 0;\n// Index for the name of the passport holder\npub global ID_CARD_MRZ_NAME_INDEX: u32 = 60;\n// Length of the MRZ on an ID card\npub global ID_CARD_MRZ_LENGTH: u32 = 90;\n\n// ECDSA curves mapping\npub global ECDSA_CURVE_P256: u32 = 0;\npub global ECDSA_CURVE_P384: u32 = 1;\npub global ECDSA_CURVE_P521: u32 = 2;\npub global ECDSA_CURVE_BRAINPOOL_B256R1: u32 = 3;\npub global ECDSA_CURVE_BRAINPOOL_B256T1: u32 = 4;\npub global ECDSA_CURVE_BRAINPOOL_B384R1: u32 = 5;\npub global ECDSA_CURVE_BRAINPOOL_B384T1: u32 = 6;\npub global ECDSA_CURVE_BRAINPOOL_B512R1: u32 = 7;\npub global ECDSA_CURVE_BRAINPOOL_B512T1: u32 = 8;\n\npub struct IDData {\n    // Regroups the hashes of all the data groups plus some padding\n    // at the start and in between each data group hashes\n    pub e_content: [u8; 700],\n    pub e_content_size: u32,\n    // Where we can find e_content in the signed_attributes\n    // It varies from document to document according to the length\n    // of the padding at the start\n    pub dg1_offset_in_e_content: u32,\n    // Last 32 bytes: result of the hash of all the hashes of the data groups\n    // Rest of the bytes: information about the signature algorithm, date, etc.\n    pub signed_attributes: [u8; 200],\n    pub signed_attributes_size: u32,\n    // The DG1 contains the Machine Readable Zone (MRZ) of the document\n    // The two lines at the bottom of the passport data page\n    // or the three bottom lines on the rear of an ID card\n    // 95 bytes for passports, 93 bytes for ID cards\n    // Including 88 bytes of MRZ and 5 bytes of padding for passports\n    // and 90 bytes of MRZ and 5 bytes of padding for ID cards\n    pub dg1: [u8; 95],\n    // The signature over the data groups\n    pub sod_signature: [u8; 512],\n    pub sod_signature_size: u32,\n}\n\npub struct DSCData {\n    // The TBS certificate of the DSC\n    // TBS stands for To Be Signed\n    pub tbs_certificate: [u8; 1500],\n    pub tbs_certificate_size: u32,\n    // The public key of the DSC (up to 512 bytes to account for RSA-4096)\n    pub pubkey: [u8; 512],\n    // The actual size of the public key\n    pub pubkey_size: u32,\n    // The index of the public key in the TBS certificate\n    pub pubkey_index: u32,\n    // Data used to verify the signature\n    // Generated by the pre-compute function in Rust\n    // c.f. main.rs\n    pub pubkey_redc_param: [u8; 513],\n    // The signature over the TBS certificate\n    pub signature: [u8; 512],\n    pub signature_size: u32,\n    // The exponent of the public key\n    // Only useful for RSA, can be ignored for ECDSA\n    pub exponent: u32,\n}\n\npub struct CSCData {\n    // The public key of the CSC (up to 512 bytes to account for RSA-4096)\n    pub pubkey: [u8; 512],\n    // The actual size of the public key\n    pub pubkey_size: u32,\n    // Data used to verify the signature\n    // Generated by the pre-compute function in Rust\n    // c.f. main.rs\n    pub pubkey_redc_param: [u8; 513],\n    // Only useful for RSA, can be ignored for ECDSA\n    pub exponent: u32,\n}\n\npub struct DiscloseFlags {\n    pub issuing_country: bool,\n    pub nationality: bool,\n    pub document_type: bool,\n    pub document_number: bool,\n    pub date_of_expiry: bool,\n    pub date_of_birth: bool,\n    pub gender: bool,\n    pub name: bool,\n}\n\npub struct DisclosedData {\n    pub issuing_country: [u8; 3],\n    pub nationality: [u8; 3],\n    pub document_type: [u8; 2],\n    pub document_number: [u8; 9],\n    pub date_of_expiry: [u8; 6],\n    pub date_of_birth: [u8; 6],\n    pub name: [u8; 39],\n}\n\npub fn get_array_slice<let N: u32, let M: u32>(arr: [u8; N], start: u32, end: u32) -> [u8; M] {\n    let mut slice = [0 as u8; M];\n    for i in start..end {\n        slice[i - start] = arr[i];\n    }\n    slice\n}\n\npub fn get_array_slice_constant<let N: u32, let M: u32>(arr: [u8; N]) -> [u8; M] {\n    let mut slice = [0 as u8; M];\n    for i in 0..M {\n        slice[i] = arr[i];\n    }\n    slice\n}\n\n// Reverse the bytes of an array so you can switch from\n// big endian to little endian order and vice versa\npub fn reverse_bytes_array<let N: u32>(arr: [u8; N]) -> [u8; N] {\n    let mut reversed_arr = [0 as u8; N];\n    for i in 0..N {\n        // Reverse\n        reversed_arr[i] = arr[N - 1 - i];\n    }\n    reversed_arr\n}\n\npub fn insert_into_array<let N: u32, let M: u32>(\n    mut arr: [u8; N],\n    sub_arr: [u8; M],\n    index: u32,\n) -> [u8; N] {\n    for i in index..index + M {\n        arr[i] = sub_arr[i - index];\n    }\n    arr\n}\n\npub fn dynamic_insert_into_array<let N: u32, let M: u32>(\n    mut arr: [u8; N],\n    sub_arr: [u8; M],\n    index: u32,\n    max_size: u32,\n) -> [u8; N] {\n    for i in index..index + max_size {\n        if i - index < M {\n            arr[i] = sub_arr[i - index];\n        }\n    }\n    arr\n}\n\npub fn is_id_card(dg1: [u8; 95]) -> bool {\n    // For passport, the last two bytes are 0\n    // since the real length is 93 for passports\n    // while it is 95 for ID cards\n    (dg1[93] != 0) & (dg1[94] != 0)\n}\n\npub fn from_byte_be_to_fields<let NBytes: u32, let N: u32>(x: [u8; NBytes]) -> [Field; N] {\n    let mut result = [0 as Field; N];\n\n    let mut limb: Field = 0;\n    let mut k = 0;\n    for _j in 0..(15 - (N * 15 - NBytes)) {\n        limb *= 256;\n        limb += x[k] as Field;\n        k += 1;\n    }\n    std::as_witness(limb);\n\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: Field = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        std::as_witness(limb);\n        result[N - i - 1] = limb;\n    }\n\n    result\n}\n\npub unconstrained fn __from_byte_be_to_fields<let NBytes: u32, let N: u32>(\n    x: [u8; NBytes],\n) -> [Field; N] {\n    from_byte_be_to_fields(x)\n}\n\npub fn get_mrz_from_dg1(dg1: [u8; 95]) -> [u8; 90] {\n    let mut mrz = [0 as u8; 90];\n    for i in 0..90 {\n        mrz[i] = dg1[i + 5];\n    }\n    mrz\n}\n\npub fn split_array<let N: u32>(array: [u8; N * 2]) -> ([u8; N], [u8; N]) {\n    let mut array_x = [0 as u8; N];\n    let mut array_y = [0 as u8; N];\n    for i in 0..N {\n        array_x[i] = array[i];\n        array_y[i] = array[i + N];\n    }\n    (array_x, array_y)\n}\n\npub fn concat_array<let N: u32>(array_x: [u8; N], array_y: [u8; N]) -> [u8; N * 2] {\n    let mut array = [0 as u8; N * 2];\n    for i in 0..N {\n        array[i] = array_x[i];\n        array[i + N] = array_y[i];\n    }\n    array\n}\n\npub fn check_bytes_zero_padding<let N: u32>(padded_array: [u8; N], len: u32) {\n    for i in 0..N {\n        if i >= len {\n            assert_eq(padded_array[i], 0);\n        }\n    }\n}\n","path":"/Users/jordanbettencourt/Documents/GitHub/Noir/passport_circuits/src/noir/lib/utils/src/lib.nr"},"64":{"source":"use date::Date;\nuse utils::{\n    get_array_slice, get_mrz_from_dg1, ID_CARD_MRZ_EXPIRY_DATE_INDEX, is_id_card,\n    PASSPORT_MRZ_EXPIRY_DATE_INDEX,\n};\n\npub fn check_expiry(dg1: [u8; 95], current_date_bytes: [u8; 8]) {\n    let mrz = get_mrz_from_dg1(dg1);\n\n    // We base the threshold year for the expiry date on the current date plus 20 years\n    // As most documents will have a 10 year validity (and some maybe 15 years?)\n    // So with 20 years we should be safe\n    let threshold_year = Date::from_bytes_long_year(current_date_bytes).add_years(20);\n    let threshold_year_bytes = threshold_year.to_bytes();\n\n    let current_date = Date::from_bytes_long_year(current_date_bytes);\n\n    let mut expiry_date_bytes = [0 as u8; 6];\n\n    if is_id_card(dg1) {\n        expiry_date_bytes = get_array_slice(\n            mrz,\n            ID_CARD_MRZ_EXPIRY_DATE_INDEX,\n            ID_CARD_MRZ_EXPIRY_DATE_INDEX + 6,\n        );\n    } else {\n        expiry_date_bytes = get_array_slice(\n            mrz,\n            PASSPORT_MRZ_EXPIRY_DATE_INDEX,\n            PASSPORT_MRZ_EXPIRY_DATE_INDEX + 6,\n        );\n    }\n\n    let expiry_date = Date::from_bytes_short_year(\n        expiry_date_bytes,\n        [threshold_year_bytes[2], threshold_year_bytes[3]],\n    );\n\n    assert(current_date.lt(expiry_date));\n}\n","path":"/Users/jordanbettencourt/Documents/GitHub/Noir/passport_circuits/src/noir/lib/data-check/expiry/src/lib.nr"},"65":{"source":"use dep::std::println;\n\npub struct Date {\n    day: u8,\n    month: u8,\n    year: u32,\n}\n\nfn get_number_from_utf8_code(code: u8) -> u8 {\n    assert(code >= 48 & code <= 57);\n    code - 48\n}\n\nfn number_to_utf8_code(number: u8) -> u8 {\n    assert(number >= 0 & number <= 9);\n    number + 48\n}\n\nimpl Date {\n    pub fn new(year: u32, month: u8, day: u8) -> Self {\n        assert(month >= 1 & month <= 12);\n        assert(day >= 1 & day <= 31);\n        let date = Self { day: day, month: month, year: year };\n        assert(day <= date.get_days_in_month(month));\n        date\n    }\n\n    pub fn from_bytes_short_year(date: [u8; 6], threshold_year: [u8; 2]) -> Self {\n        let firstYearDigit = get_number_from_utf8_code(date[0]);\n        let secondYearDigit = get_number_from_utf8_code(date[1]);\n\n        let mut year: u32 = firstYearDigit as u32 * 10 + secondYearDigit as u32;\n\n        let firstMonthDigit = get_number_from_utf8_code(date[2]);\n        let secondMonthDigit = get_number_from_utf8_code(date[3]);\n\n        let month = firstMonthDigit * 10 + secondMonthDigit;\n\n        let firstDayDigit = get_number_from_utf8_code(date[4]);\n        let secondDayDigit = get_number_from_utf8_code(date[5]);\n\n        let day = firstDayDigit * 10 + secondDayDigit;\n\n        let currentYearFirstDigit = get_number_from_utf8_code(threshold_year[0]);\n        let currentYearSecondDigit = get_number_from_utf8_code(threshold_year[1]);\n\n        let mut currentYear: u32 =\n            currentYearFirstDigit as u32 * 10 + currentYearSecondDigit as u32;\n\n        // This way we have a smooth 100 years period according to a threshold year\n        // Taking the current year as threshold year (for birthdates for example)\n        // if the current year is 2023, then 24 will be interpreted as 1924\n        // while 22 will be interpreted as 2022\n        // A bit problematic for people over 100 years old\n        if year <= currentYear {\n            year += 2000;\n        } else {\n            year += 1900;\n        }\n\n        Self { day: day, month: month, year: year }\n    }\n\n    pub fn from_bytes_long_year(date: [u8; 8]) -> Self {\n        let firstYearDigit = get_number_from_utf8_code(date[0]);\n        let secondYearDigit = get_number_from_utf8_code(date[1]);\n        let thirdYearDigit = get_number_from_utf8_code(date[2]);\n        let fourthYearDigit = get_number_from_utf8_code(date[3]);\n\n        let year: u32 = firstYearDigit as u32 * 1000\n            + secondYearDigit as u32 * 100\n            + thirdYearDigit as u32 * 10\n            + fourthYearDigit as u32;\n\n        let firstMonthDigit = get_number_from_utf8_code(date[4]);\n        let secondMonthDigit = get_number_from_utf8_code(date[5]);\n\n        let month = firstMonthDigit * 10 + secondMonthDigit;\n\n        let firstDayDigit = get_number_from_utf8_code(date[6]);\n        let secondDayDigit = get_number_from_utf8_code(date[7]);\n\n        let day = firstDayDigit * 10 + secondDayDigit;\n\n        Self { day: day, month: month, year: year }\n    }\n\n    pub fn from_str_short_year(date: str<6>, threshold_year: str<2>) -> Self {\n        let date_bytes = date.as_bytes();\n        Date::from_bytes_short_year(date_bytes, threshold_year.as_bytes())\n    }\n\n    pub fn from_str_long_year(date: str<8>) -> Self {\n        let date_bytes = date.as_bytes();\n        Date::from_bytes_long_year(date_bytes)\n    }\n\n    pub fn get_duration_in_days(self: Self, other: Self, absolute: bool) -> i64 {\n        let mut duration_years = self.get_duration_between_years(other);\n        let mut duration_months = self.get_duration_between_months(other);\n        let mut duration_days = self.day as i64 - other.day as i64;\n        if (self.year < other.year) {\n            if (other.is_leap_year() & other.month > 2 & self.month > 2) {\n                duration_days -= 1;\n            }\n        } else if (self.year > other.year) {\n            if (self.is_leap_year() & self.month > 2 & other.month > 2) {\n                duration_days += 1;\n            }\n        }\n        let totalDuration: i64 = duration_years + duration_months + duration_days;\n\n        if (totalDuration < 0) & absolute {\n            -1 * totalDuration\n        } else {\n            totalDuration\n        }\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.get_duration_in_days(other, false) > 0\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.get_duration_in_days(other, false) < 0\n    }\n\n    pub fn eq(self: Self, other: Self) -> bool {\n        (self.day == other.day) & (self.month == other.month) & (self.year == other.year)\n    }\n\n    pub fn ne(self: Self, other: Self) -> bool {\n        !self.eq(other)\n    }\n\n    pub fn gte(self: Self, other: Self) -> bool {\n        self.get_duration_in_days(other, false) >= 0\n    }\n\n    pub fn lte(self: Self, other: Self) -> bool {\n        self.get_duration_in_days(other, false) <= 0\n    }\n\n    pub fn println(self: Self) {\n        let year = self.year;\n        let month = self.month;\n        let day = self.day;\n        // Let's write the date in the YYYY-MM-DD format\n        // since people don't agree on which format is best\n        // between MM/DD/YYYY and DD/MM/YYYY\n        if (month < 10) & (day < 10) {\n            println(f\"Date: {year}-0{month}-0{day}\");\n        } else if month < 10 {\n            println(f\"Date: {year}-0{month}-{day}\");\n        } else if day < 10 {\n            println(f\"Date: {year}-{month}-0{day}\");\n        } else {\n            println(f\"Date: {year}-{month}-{day}\");\n        }\n    }\n\n    pub fn to_bytes(self: Self) -> [u8; 8] {\n        let mut date: [u8; 8] = [0; 8];\n\n        let firstYearDigit = self.year / 1000;\n        let secondYearDigit = (self.year - firstYearDigit * 1000) / 100;\n        let thirdYearDigit = (self.year - firstYearDigit * 1000 - secondYearDigit * 100) / 10;\n        let fourthYearDigit =\n            self.year - firstYearDigit * 1000 - secondYearDigit * 100 - thirdYearDigit * 10;\n\n        date[0] = number_to_utf8_code(firstYearDigit as u8);\n        date[1] = number_to_utf8_code(secondYearDigit as u8);\n        date[2] = number_to_utf8_code(thirdYearDigit as u8);\n        date[3] = number_to_utf8_code(fourthYearDigit as u8);\n\n        let firstMonthDigit = self.month / 10;\n        let secondMonthDigit = self.month - firstMonthDigit * 10;\n\n        date[4] = number_to_utf8_code(firstMonthDigit as u8);\n        date[5] = number_to_utf8_code(secondMonthDigit as u8);\n\n        let firstDayDigit = self.day / 10;\n        let secondDayDigit = self.day - firstDayDigit * 10;\n\n        date[6] = number_to_utf8_code(firstDayDigit as u8);\n        date[7] = number_to_utf8_code(secondDayDigit as u8);\n\n        date\n    }\n\n    pub fn is_leap_year(self: Self) -> bool {\n        ((self.year % 4 == 0) & (self.year % 100 != 0)) | (self.year % 400 == 0)\n    }\n\n    pub fn leap_year_count(year: u32) -> i32 {\n        (year / 4) as i32 - (year / 100) as i32 + (year / 400) as i32\n    }\n\n    pub fn get_days_in_month(self: Self, month: u8) -> u8 {\n        assert(month >= 1 & month <= 12);\n        if month == 2 {\n            if self.is_leap_year() {\n                29\n            } else {\n                28\n            }\n        } else {\n            if (month == 1)\n                | (month == 3)\n                | (month == 5)\n                | (month == 7)\n                | (month == 8)\n                | (month == 10)\n                | (month == 12) {\n                31\n            } else {\n                30\n            }\n        }\n    }\n\n    pub fn get_duration_between_months(self: Self, other: Self) -> i64 {\n        assert(self.month >= 1 & self.month <= 12);\n        assert(other.month >= 1 & other.month <= 12);\n        let mut duration: i64 = 0;\n        if (self.month < other.month) {\n            for month in 1..13 {\n                if month >= self.month & month < other.month {\n                    duration -= other.get_days_in_month(month) as i64;\n                }\n            }\n        } else {\n            for month in 1..13 {\n                if month >= other.month & month < self.month {\n                    duration += self.get_days_in_month(month) as i64;\n                }\n            }\n        }\n        duration\n    }\n\n    pub fn get_duration_between_years(self: Self, other: Self) -> i64 {\n        let mut duration: i64 = 0;\n        if (self.year < other.year) {\n            let mut leap_year_count: i32 =\n                Date::leap_year_count(other.year - 1) - Date::leap_year_count(self.year);\n            if self.is_leap_year() {\n                leap_year_count += 1;\n            }\n            duration -= leap_year_count as i64 * 366;\n            duration -=\n                (other.year as i64 - self.year as i64 - leap_year_count as i64) as i64 * 365;\n        } else if (self.year > other.year) {\n            let mut leap_year_count: i32 =\n                Date::leap_year_count(self.year - 1) - Date::leap_year_count(other.year);\n            if other.is_leap_year() {\n                leap_year_count += 1;\n            }\n            duration += leap_year_count as i64 * 366;\n            duration +=\n                (self.year as i64 - other.year as i64 - leap_year_count as i64) as i64 * 365;\n        }\n        duration\n    }\n\n    pub fn add_years(self: Self, years: u32) -> Self {\n        Self { day: self.day, month: self.month, year: self.year + years }\n    }\n\n    pub fn sub_years(self: Self, years: u32) -> Self {\n        Self { day: self.day, month: self.month, year: self.year - years }\n    }\n\n    pub fn add_months(self: Self, months: u32) -> Self {\n        let mut newMonth = self.month as u32 + months;\n        let mut newYear = self.year;\n        let yearToAdd = (newMonth - 1) / 12;\n        if newMonth > 12 {\n            newYear += yearToAdd as u32;\n            newMonth -= 12 * yearToAdd;\n        }\n        Self { day: self.day, month: newMonth as u8, year: newYear }\n    }\n\n    pub fn sub_months(self: Self, months: u32) -> Self {\n        let mut newMonth = self.month as i32 - months as i32;\n        let mut newYear = self.year;\n        if newMonth < 1 {\n            let yearToSub = ((newMonth as i32 - 12 as i32) * -1) / 12;\n            newYear -= yearToSub as u32;\n            newMonth += 12 * yearToSub;\n        }\n        Self { day: self.day, month: newMonth as u8, year: newYear }\n    }\n\n    pub fn add_days(self: Self, days: u32) -> Self {\n        let mut newDay = self.day as u32 + days;\n        let mut newMonth = self.month as u32;\n        let mut newYear = self.year;\n        let mut date = Self { day: newDay as u8, month: newMonth as u8, year: newYear };\n        if newDay > self.get_days_in_month(self.month) as u32 {\n            let max_months = (newDay / 30) + 1;\n            let bound = self.month + max_months as u8;\n            for _ in self.month..bound {\n                let days_in_month = date.get_days_in_month(newMonth as u8) as u32;\n                if newDay > days_in_month {\n                    newDay -= days_in_month;\n                    newMonth += 1;\n                    if newMonth > 12 {\n                        newYear += 1;\n                        newMonth = 1;\n                    }\n                    // We need to mutate the date object inside the loop\n                    // so we can use get_days_in_month properly\n                    date.day = newDay as u8;\n                    date.year = newYear;\n                    date.month = newMonth as u8;\n                }\n            }\n        }\n        date\n    }\n\n    // Performance could be improved\n    pub fn sub_days(self: Self, days: u32) -> Self {\n        let mut newDay = self.day as i32 - days as i32;\n        let mut newMonth = self.month as i32;\n        let mut newYear = self.year;\n        let mut date = Self { day: newDay as u8, month: newMonth as u8, year: newYear };\n        if newDay < 1 {\n            let max_months = (self.day as u32 + days) / 30 + 1;\n            let bound = self.month + max_months as u8;\n            for _ in self.month..bound {\n                let days_in_month = date.get_days_in_month(newMonth as u8) as i32;\n                if newDay < 1 {\n                    newDay += days_in_month;\n                    newMonth -= 1;\n                    if newMonth < 1 {\n                        newYear -= 1;\n                        newMonth = 12;\n                    }\n                    // We need to mutate the date object inside the loop\n                    // so we can use get_days_in_month properly\n                    date.day = newDay as u8;\n                    date.year = newYear;\n                    date.month = newMonth as u8;\n                }\n            }\n        }\n        date\n    }\n}\n\n#[test]\nfn test_date_init() {\n    let date = Date::new(2023, 12, 19);\n\n    assert(date.day == 19);\n    assert(date.month == 12);\n    assert(date.year == 2023);\n}\n\n#[test]\nfn test_date_from_bytes_short_year() {\n    let date = Date::from_bytes_short_year([50, 51, 49, 50, 49, 57], [50, 52]);\n\n    assert(date.day == 19);\n    assert(date.month == 12);\n    assert(date.year == 2023);\n}\n\n#[test]\nfn test_date_from_bytes_long_year() {\n    let date = Date::from_bytes_long_year([50, 48, 50, 51, 49, 50, 49, 57]);\n\n    assert(date.day == 19);\n    assert(date.month == 12);\n    assert(date.year == 2023);\n}\n\n#[test]\nfn test_date_from_str_short_year() {\n    let date = Date::from_str_short_year(\"231219\", \"24\");\n\n    assert(date.day == 19);\n    assert(date.month == 12);\n    assert(date.year == 2023);\n}\n\n#[test]\nfn test_date_from_str_long_year() {\n    let date = Date::from_str_long_year(\"20231219\");\n\n    assert(date.day == 19);\n    assert(date.month == 12);\n    assert(date.year == 2023);\n}\n\n#[test]\nfn test_date_to_bytes() {\n    let date = Date::new(2023, 12, 19);\n\n    let date_bytes = date.to_bytes();\n\n    assert(date_bytes[0] == 50);\n    assert(date_bytes[1] == 48);\n    assert(date_bytes[2] == 50);\n    assert(date_bytes[3] == 51);\n    assert(date_bytes[4] == 49);\n    assert(date_bytes[5] == 50);\n    assert(date_bytes[6] == 49);\n    assert(date_bytes[7] == 57);\n}\n\n#[test]\nfn test_date_is_leap_year() {\n    let date = Date::new(2023, 12, 19);\n\n    assert(date.is_leap_year() == false);\n\n    let date = Date::new(2024, 12, 19);\n\n    assert(date.is_leap_year() == true);\n}\n\n#[test]\nfn test_date_get_days_in_month() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(date.get_days_in_month(1) == 31);\n    assert(date.get_days_in_month(2) == 28);\n    assert(date.get_days_in_month(3) == 31);\n    assert(date.get_days_in_month(4) == 30);\n    assert(date.get_days_in_month(5) == 31);\n    assert(date.get_days_in_month(6) == 30);\n    assert(date.get_days_in_month(7) == 31);\n    assert(date.get_days_in_month(8) == 31);\n    assert(date.get_days_in_month(9) == 30);\n    assert(date.get_days_in_month(10) == 31);\n    assert(date.get_days_in_month(11) == 30);\n    assert(date.get_days_in_month(12) == 31);\n\n    let date = Date::new(2024, 1, 1);\n\n    assert(date.get_days_in_month(1) == 31);\n    assert(date.get_days_in_month(2) == 29);\n    assert(date.get_days_in_month(3) == 31);\n    assert(date.get_days_in_month(4) == 30);\n    assert(date.get_days_in_month(5) == 31);\n    assert(date.get_days_in_month(6) == 30);\n    assert(date.get_days_in_month(7) == 31);\n    assert(date.get_days_in_month(8) == 31);\n    assert(date.get_days_in_month(9) == 30);\n    assert(date.get_days_in_month(10) == 31);\n    assert(date.get_days_in_month(11) == 30);\n    assert(date.get_days_in_month(12) == 31);\n}\n\n#[test]\nfn test_date_get_duration_between_months() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(Date::new(2023, 1, 1).get_duration_between_months(date) == 0);\n    assert(Date::new(2023, 2, 1).get_duration_between_months(date) == 31);\n    assert(Date::new(2023, 3, 1).get_duration_between_months(date) == 59);\n    assert(Date::new(2023, 4, 1).get_duration_between_months(date) == 90);\n    assert(Date::new(2023, 5, 1).get_duration_between_months(date) == 120);\n    assert(Date::new(2023, 6, 1).get_duration_between_months(date) == 151);\n    assert(Date::new(2023, 7, 1).get_duration_between_months(date) == 181);\n    assert(Date::new(2023, 8, 1).get_duration_between_months(date) == 212);\n    assert(Date::new(2023, 9, 1).get_duration_between_months(date) == 243);\n    assert(Date::new(2023, 10, 1).get_duration_between_months(date) == 273);\n    assert(Date::new(2023, 11, 1).get_duration_between_months(date) == 304);\n    assert(Date::new(2023, 12, 1).get_duration_between_months(date) == 334);\n}\n\n#[test]\nfn test_date_get_duration_between_years() {\n    let date = Date::new(2023, 1, 1);\n\n    // Positive duration\n    assert(Date::new(2023, 1, 1).get_duration_between_years(date) == 0);\n    assert(Date::new(2024, 1, 1).get_duration_between_years(date) == 365);\n    assert(Date::new(2025, 1, 1).get_duration_between_years(date) == 731);\n    assert(Date::new(2026, 1, 1).get_duration_between_years(date) == 1096);\n    assert(Date::new(2027, 1, 1).get_duration_between_years(date) == 1461);\n    assert(Date::new(2028, 1, 1).get_duration_between_years(date) == 1826);\n    assert(Date::new(2029, 1, 1).get_duration_between_years(date) == 2192);\n    assert(Date::new(2030, 1, 1).get_duration_between_years(date) == 2557);\n    assert(Date::new(2031, 1, 1).get_duration_between_years(date) == 2922);\n    assert(Date::new(2032, 1, 1).get_duration_between_years(date) == 3287);\n    assert(Date::new(2033, 1, 1).get_duration_between_years(date) == 3653);\n    assert(Date::new(2034, 1, 1).get_duration_between_years(date) == 4018);\n\n    // Negative duration\n    assert(Date::new(2022, 1, 1).get_duration_between_years(date) == -365);\n    assert(Date::new(2021, 1, 1).get_duration_between_years(date) == -730);\n    assert(Date::new(2020, 1, 1).get_duration_between_years(date) == -1096);\n    assert(Date::new(2019, 1, 1).get_duration_between_years(date) == -1461);\n    assert(Date::new(2018, 1, 1).get_duration_between_years(date) == -1826);\n    assert(Date::new(2017, 1, 1).get_duration_between_years(date) == -2191);\n    assert(Date::new(2016, 1, 1).get_duration_between_years(date) == -2557);\n    assert(Date::new(2015, 1, 1).get_duration_between_years(date) == -2922);\n    assert(Date::new(2014, 1, 1).get_duration_between_years(date) == -3287);\n    assert(Date::new(2013, 1, 1).get_duration_between_years(date) == -3652);\n    assert(Date::new(2012, 1, 1).get_duration_between_years(date) == -4018);\n}\n\n#[test]\nfn test_date_get_duration_in_days() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(Date::new(2023, 1, 1).get_duration_in_days(date, false) == 0);\n    assert(Date::new(2023, 1, 15).get_duration_in_days(date, false) == 14);\n    assert(Date::new(2023, 2, 1).get_duration_in_days(date, false) == 31);\n    assert(Date::new(2023, 2, 15).get_duration_in_days(date, false) == 45);\n    assert(Date::new(2023, 3, 1).get_duration_in_days(date, false) == 59);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(date, false) == 364);\n    assert(Date::new(2024, 1, 1).get_duration_in_days(date, false) == 365);\n    assert(Date::new(2024, 2, 28).get_duration_in_days(date, false) == 365 + 31 + 27);\n    assert(Date::new(2024, 2, 29).get_duration_in_days(date, false) == 365 + 31 + 28);\n    assert(Date::new(2024, 3, 1).get_duration_in_days(date, false) == 365 + 31 + 29);\n    assert(Date::new(2024, 12, 31).get_duration_in_days(date, false) == 365 + 365);\n    assert(Date::new(2025, 1, 1).get_duration_in_days(date, false) == 365 + 366);\n\n    assert(Date::new(2017, 6, 18).get_duration_in_days(Date::new(2000, 1, 1), false) == 6378);\n    assert(Date::new(2179, 6, 6).get_duration_in_days(Date::new(2000, 1, 1), false) == 0xffff);\n    assert(Date::new(2019, 6, 6).get_duration_in_days(Date::new(2000, 1, 1), false) == 7096);\n    assert(Date::new(2001, 1, 1).get_duration_in_days(Date::new(2000, 12, 31), false) == 1);\n    assert(Date::new(2001, 1, 1).get_duration_in_days(Date::new(2000, 12, 31), false) == 1);\n    assert(Date::new(2001, 1, 1).get_duration_in_days(Date::new(2000, 1, 1), false) == 366);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 0);\n    assert(Date::new(2023, 1, 15).get_duration_in_days(Date::new(2023, 1, 1), false) == 14);\n    assert(Date::new(2023, 2, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 31);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2023, 1, 1), false) == 364);\n    assert(Date::new(2024, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 365);\n    assert(Date::new(2024, 1, 1).get_duration_in_days(Date::new(2020, 1, 1), false) == 1461);\n    assert(Date::new(2024, 1, 1).get_duration_in_days(Date::new(2020, 3, 1), false) == 1401);\n    assert(Date::new(2024, 12, 31).get_duration_in_days(Date::new(2023, 12, 31), false) == 366);\n    assert(Date::new(2028, 12, 31).get_duration_in_days(Date::new(2023, 12, 31), false) == 1827);\n    assert(Date::new(2029, 12, 31).get_duration_in_days(Date::new(2023, 12, 31), false) == 2192);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2022, 1, 1), false) == 365);\n    assert(Date::new(2025, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 731);\n    assert(Date::new(2026, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 1096);\n    assert(Date::new(2030, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 2557);\n    assert(Date::new(2023, 6, 15).get_duration_in_days(Date::new(2023, 1, 1), false) == 165);\n    assert(Date::new(2023, 12, 25).get_duration_in_days(Date::new(2023, 6, 15), false) == 193);\n    assert(Date::new(2024, 2, 29).get_duration_in_days(Date::new(2023, 12, 31), false) == 60);\n    assert(Date::new(2025, 3, 15).get_duration_in_days(Date::new(2023, 9, 1), false) == 561);\n    assert(Date::new(2050, 2, 4).get_duration_in_days(Date::new(2000, 1, 1), false) == 18297);\n    assert(Date::new(2171, 9, 9).get_duration_in_days(Date::new(2000, 1, 1), false) == 62708);\n    assert(Date::new(2142, 2, 24).get_duration_in_days(Date::new(2000, 1, 1), false) == 51919);\n    assert(Date::new(2091, 12, 23).get_duration_in_days(Date::new(2000, 1, 1), false) == 33594);\n    assert(Date::new(2169, 2, 14).get_duration_in_days(Date::new(2000, 1, 1), false) == 61771);\n    assert(Date::new(2038, 11, 12).get_duration_in_days(Date::new(2000, 1, 1), false) == 14195);\n    assert(Date::new(2129, 7, 11).get_duration_in_days(Date::new(2000, 1, 1), false) == 47308);\n    assert(Date::new(2112, 9, 16).get_duration_in_days(Date::new(2000, 1, 1), false) == 41166);\n    assert(Date::new(2109, 7, 23).get_duration_in_days(Date::new(2000, 1, 1), false) == 40015);\n    assert(Date::new(2101, 12, 18).get_duration_in_days(Date::new(2000, 1, 1), false) == 37241);\n    assert(Date::new(2150, 1, 7).get_duration_in_days(Date::new(2000, 1, 1), false) == 54793);\n    assert(Date::new(2179, 9, 15).get_duration_in_days(Date::new(2000, 1, 1), false) == 65636);\n    assert(Date::new(2038, 1, 30).get_duration_in_days(Date::new(2000, 1, 1), false) == 13909);\n    assert(Date::new(2154, 7, 4).get_duration_in_days(Date::new(2000, 1, 1), false) == 56432);\n    assert(Date::new(2010, 10, 27).get_duration_in_days(Date::new(2000, 1, 1), false) == 3952);\n    assert(Date::new(2194, 9, 4).get_duration_in_days(Date::new(2000, 1, 1), false) == 71104);\n    assert(Date::new(2014, 7, 23).get_duration_in_days(Date::new(2000, 1, 1), false) == 5317);\n    assert(Date::new(2118, 12, 17).get_duration_in_days(Date::new(2000, 1, 1), false) == 43449);\n    assert(Date::new(2116, 9, 27).get_duration_in_days(Date::new(2000, 1, 1), false) == 42638);\n    assert(Date::new(2091, 9, 25).get_duration_in_days(Date::new(2000, 1, 1), false) == 33505);\n    assert(Date::new(2147, 11, 15).get_duration_in_days(Date::new(2000, 1, 1), false) == 54009);\n    assert(Date::new(2130, 7, 30).get_duration_in_days(Date::new(2000, 1, 1), false) == 47692);\n    assert(Date::new(2031, 12, 18).get_duration_in_days(Date::new(2000, 1, 1), false) == 11674);\n    assert(Date::new(2092, 1, 30).get_duration_in_days(Date::new(2000, 1, 1), false) == 33632);\n    assert(Date::new(2111, 7, 14).get_duration_in_days(Date::new(2000, 1, 1), false) == 40736);\n    assert(Date::new(2089, 11, 10).get_duration_in_days(Date::new(2000, 1, 1), false) == 32821);\n    assert(Date::new(2022, 10, 26).get_duration_in_days(Date::new(2000, 1, 1), false) == 8334);\n    assert(Date::new(2159, 7, 19).get_duration_in_days(Date::new(2000, 1, 1), false) == 58273);\n    assert(Date::new(2164, 8, 25).get_duration_in_days(Date::new(2000, 1, 1), false) == 60137);\n    assert(Date::new(2079, 4, 13).get_duration_in_days(Date::new(2000, 1, 1), false) == 28957);\n\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2017, 6, 18), false) == -6378);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2179, 6, 6), false) == -0xffff);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2019, 6, 6), false) == -7096);\n    assert(Date::new(2000, 12, 31).get_duration_in_days(Date::new(2001, 1, 1), false) == -1);\n    assert(Date::new(2000, 12, 31).get_duration_in_days(Date::new(2001, 1, 1), false) == -1);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2001, 1, 1), false) == -366);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), false) == 0);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 1, 15), false) == -14);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 2, 1), false) == -31);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 12, 31), false) == -364);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2024, 1, 1), false) == -365);\n    assert(Date::new(2020, 1, 1).get_duration_in_days(Date::new(2024, 1, 1), false) == -1461);\n    assert(Date::new(2020, 3, 1).get_duration_in_days(Date::new(2024, 1, 1), false) == -1401);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2024, 12, 31), false) == -366);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2028, 12, 31), false) == -1827);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2029, 12, 31), false) == -2192);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2022, 10, 26), false) == -8334);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2159, 7, 19), false) == -58273);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2164, 8, 25), false) == -60137);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2079, 4, 13), false) == -28957);\n\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2017, 6, 18), true) == 6378);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2179, 6, 6), true) == 0xffff);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2019, 6, 6), true) == 7096);\n    assert(Date::new(2000, 12, 31).get_duration_in_days(Date::new(2001, 1, 1), true) == 1);\n    assert(Date::new(2000, 12, 31).get_duration_in_days(Date::new(2001, 1, 1), true) == 1);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2001, 1, 1), true) == 366);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 1, 1), true) == 0);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 1, 15), true) == 14);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 2, 1), true) == 31);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2023, 12, 31), true) == 364);\n    assert(Date::new(2023, 1, 1).get_duration_in_days(Date::new(2024, 1, 1), true) == 365);\n    assert(Date::new(2020, 1, 1).get_duration_in_days(Date::new(2024, 1, 1), true) == 1461);\n    assert(Date::new(2020, 3, 1).get_duration_in_days(Date::new(2024, 1, 1), true) == 1401);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2024, 12, 31), true) == 366);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2028, 12, 31), true) == 1827);\n    assert(Date::new(2023, 12, 31).get_duration_in_days(Date::new(2029, 12, 31), true) == 2192);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2022, 10, 26), true) == 8334);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2159, 7, 19), true) == 58273);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2164, 8, 25), true) == 60137);\n    assert(Date::new(2000, 1, 1).get_duration_in_days(Date::new(2079, 4, 13), true) == 28957);\n}\n\n#[test]\nfn test_date_eq() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(date.eq(Date::new(2023, 1, 1)));\n    assert(!date.eq(Date::new(2023, 1, 2)));\n}\n\n#[test]\nfn test_date_ne() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(!date.ne(Date::new(2023, 1, 1)));\n    assert(date.ne(Date::new(2023, 1, 2)));\n}\n\n#[test]\nfn test_date_gt() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(!date.gt(Date::new(2023, 1, 1)));\n    assert(!date.gt(Date::new(2023, 1, 2)));\n    assert(date.gt(Date::new(2022, 12, 31)));\n}\n\n#[test]\nfn test_date_lt() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(!date.lt(Date::new(2023, 1, 1)));\n    assert(!date.lt(Date::new(2022, 12, 31)));\n    assert(date.lt(Date::new(2023, 1, 2)));\n}\n\n#[test]\nfn test_date_gte() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(date.gte(Date::new(2023, 1, 1)));\n    assert(!date.gte(Date::new(2023, 1, 2)));\n    assert(date.gte(Date::new(2022, 12, 31)));\n}\n\n#[test]\nfn test_date_lte() {\n    let date = Date::new(2023, 1, 1);\n\n    assert(date.lte(Date::new(2023, 1, 1)));\n    assert(!date.lte(Date::new(2022, 12, 31)));\n    assert(date.lte(Date::new(2023, 1, 2)));\n}\n\n#[test]\nfn test_date_add_years() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.add_years(0).eq(Date::new(2023, 7, 14)));\n    assert(date.add_years(1).eq(Date::new(2024, 7, 14)));\n    assert(date.add_years(2).eq(Date::new(2025, 7, 14)));\n    assert(date.add_years(3).eq(Date::new(2026, 7, 14)));\n    assert(date.add_years(4).eq(Date::new(2027, 7, 14)));\n    assert(date.add_years(5).eq(Date::new(2028, 7, 14)));\n}\n\n#[test]\nfn test_date_sub_years() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.sub_years(0).eq(Date::new(2023, 7, 14)));\n    assert(date.sub_years(1).eq(Date::new(2022, 7, 14)));\n    assert(date.sub_years(2).eq(Date::new(2021, 7, 14)));\n    assert(date.sub_years(3).eq(Date::new(2020, 7, 14)));\n    assert(date.sub_years(4).eq(Date::new(2019, 7, 14)));\n    assert(date.sub_years(5).eq(Date::new(2018, 7, 14)));\n}\n\n#[test]\nfn test_date_add_months() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.add_months(0).eq(Date::new(2023, 7, 14)));\n    assert(date.add_months(1).eq(Date::new(2023, 8, 14)));\n    assert(date.add_months(2).eq(Date::new(2023, 9, 14)));\n\n    assert(date.add_months(6).eq(Date::new(2024, 1, 14)));\n    assert(date.add_months(7).eq(Date::new(2024, 2, 14)));\n    assert(date.add_months(8).eq(Date::new(2024, 3, 14)));\n\n    assert(date.add_months(17).eq(Date::new(2024, 12, 14)));\n    assert(date.add_months(18).eq(Date::new(2025, 1, 14)));\n\n    assert(date.add_months(29).eq(Date::new(2025, 12, 14)));\n    assert(date.add_months(30).eq(Date::new(2026, 1, 14)));\n}\n\n#[test]\nfn test_date_sub_months() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.sub_months(0).eq(Date::new(2023, 7, 14)));\n    assert(date.sub_months(1).eq(Date::new(2023, 6, 14)));\n    assert(date.sub_months(2).eq(Date::new(2023, 5, 14)));\n\n    assert(date.sub_months(6).eq(Date::new(2023, 1, 14)));\n    assert(date.sub_months(7).eq(Date::new(2022, 12, 14)));\n    assert(date.sub_months(8).eq(Date::new(2022, 11, 14)));\n\n    assert(date.sub_months(17).eq(Date::new(2022, 2, 14)));\n    assert(date.sub_months(18).eq(Date::new(2022, 1, 14)));\n    assert(date.sub_months(19).eq(Date::new(2021, 12, 14)));\n\n    assert(date.sub_months(30).eq(Date::new(2021, 1, 14)));\n    assert(date.sub_months(31).eq(Date::new(2020, 12, 14)));\n\n    assert(date.sub_months(41).eq(Date::new(2020, 2, 14)));\n    assert(date.sub_months(42).eq(Date::new(2020, 1, 14)));\n    assert(date.sub_months(43).eq(Date::new(2019, 12, 14)));\n}\n\n#[test]\nfn test_date_add_days() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.add_days(0).eq(Date::new(2023, 7, 14)));\n    assert(date.add_days(1).eq(Date::new(2023, 7, 15)));\n    assert(date.add_days(2).eq(Date::new(2023, 7, 16)));\n\n    assert(date.add_days(17).eq(Date::new(2023, 7, 31)));\n    assert(date.add_days(18).eq(Date::new(2023, 8, 1)));\n    assert(date.add_days(19).eq(Date::new(2023, 8, 2)));\n\n    assert(date.add_days(31).eq(Date::new(2023, 8, 14)));\n    assert(date.add_days(32).eq(Date::new(2023, 8, 15)));\n    assert(date.add_days(33).eq(Date::new(2023, 8, 16)));\n\n    assert(date.add_days(365).eq(Date::new(2024, 7, 13)));\n    assert(date.add_days(366).eq(Date::new(2024, 7, 14)));\n    assert(date.add_days(367).eq(Date::new(2024, 7, 15)));\n\n    assert(date.add_days(365 + 365).eq(Date::new(2025, 7, 13)));\n    assert(date.add_days(365 + 366).eq(Date::new(2025, 7, 14)));\n    assert(date.add_days(365 + 367).eq(Date::new(2025, 7, 15)));\n\n    assert(date.add_days(365 + 366 + 364).eq(Date::new(2026, 7, 13)));\n    assert(date.add_days(365 + 366 + 365).eq(Date::new(2026, 7, 14)));\n    assert(date.add_days(365 + 366 + 366).eq(Date::new(2026, 7, 15)));\n\n    // After 4 regular years and 2 leap years\n    assert(date.add_days(365 * 4 + 366 * 2 - 1).eq(Date::new(2029, 7, 13)));\n    assert(date.add_days(365 * 4 + 366 * 2).eq(Date::new(2029, 7, 14)));\n    assert(date.add_days(365 * 4 + 366 * 2 + 1).eq(Date::new(2029, 7, 15)));\n}\n\n#[test]\nfn test_date_sub_days() {\n    let date = Date::new(2023, 7, 14);\n\n    assert(date.sub_days(0).eq(Date::new(2023, 7, 14)));\n    assert(date.sub_days(1).eq(Date::new(2023, 7, 13)));\n    assert(date.sub_days(2).eq(Date::new(2023, 7, 12)));\n\n    assert(date.sub_days(17).eq(Date::new(2023, 6, 28)));\n    assert(date.sub_days(18).eq(Date::new(2023, 6, 27)));\n    assert(date.sub_days(19).eq(Date::new(2023, 6, 26)));\n\n    assert(date.sub_days(31).eq(Date::new(2023, 6, 14)));\n    assert(date.sub_days(32).eq(Date::new(2023, 6, 13)));\n    assert(date.sub_days(33).eq(Date::new(2023, 6, 12)));\n\n    assert(date.sub_days(365).eq(Date::new(2022, 7, 14)));\n    assert(date.sub_days(366).eq(Date::new(2022, 7, 13)));\n    assert(date.sub_days(367).eq(Date::new(2022, 7, 12)));\n\n    assert(date.sub_days(365 + 365).eq(Date::new(2021, 7, 14)));\n    assert(date.sub_days(365 + 366).eq(Date::new(2021, 7, 13)));\n    assert(date.sub_days(365 + 367).eq(Date::new(2021, 7, 12)));\n\n    assert(date.sub_days(365 + 365 + 365).eq(Date::new(2020, 7, 14)));\n    assert(date.sub_days(365 + 365 + 366).eq(Date::new(2020, 7, 13)));\n    assert(date.sub_days(365 + 365 + 367).eq(Date::new(2020, 7, 12)));\n\n    // After 5 regular years and 1 leap year\n    assert(date.sub_days(365 * 5 + 366 - 1).eq(Date::new(2017, 7, 15)));\n    assert(date.sub_days(365 * 5 + 366).eq(Date::new(2017, 7, 14)));\n    assert(date.sub_days(365 * 5 + 366 + 1).eq(Date::new(2017, 7, 13)));\n\n    // After 6 regular years and 2 leap years\n    assert(date.sub_days(365 * 6 + 366 * 2 - 1).eq(Date::new(2015, 7, 15)));\n    assert(date.sub_days(365 * 6 + 366 * 2).eq(Date::new(2015, 7, 14)));\n    assert(date.sub_days(365 * 6 + 366 * 2 + 1).eq(Date::new(2015, 7, 13)));\n}\n\n#[test]\nfn test_date_age() {\n    let birthdate = Date::new(1995, 4, 13);\n\n    // Add 18 years to the birthdate\n    // to get the date when the person is 18 years old\n    let majority_date = birthdate.add_years(18);\n\n    // Make sure the majority date is correct\n    assert(majority_date.eq(Date::new(2013, 4, 13)));\n\n    // Compare the majority date to the current date\n    // to see if the person is 18 years old\n    assert(majority_date.lte(Date::new(2023, 12, 20)));\n}\n","path":"/Users/jordanbettencourt/nargo/github.com/madztheo/noir-date.git/v0.4.5/src/lib.nr"},"66":{"source":"use std::hash::sha256;\nuse utils::is_id_card;\n\n/**\n* Computes the hash of the MRZ (Data Group 1) and checks it is the same as the one\n* provided in the SOD file of the ID and then use it along with the rest of the\n* hashes of the remaining data groups to compute the final hash contained in the last 32 bytes of\n* eContent that is then signed by the Document Signing Certificate (DSC)\n* This lets us make sure the data is authentic and has not been tampered with, so we can use the data\n* of the MRZ to build subsequent proofs (age, citizenship, etc.)\n*/\npub fn check_integrity_of_data(\n    dg1: [u8; 95],\n    signed_attributes: [u8; 200],\n    signed_attributes_size: u32,\n    e_content: [u8; 700],\n    e_content_size: u32,\n    dg1_offset_in_e_content: u32,\n) {\n    // For passports we ignore the last padding characters\n    let mut dg1_size: u64 = 93;\n\n    // If it's an ID card then the array should not have any padding\n    // character\n    if is_id_card(dg1) {\n        dg1_size = 95;\n    }\n\n    // We only need to recompute the hash of the MRZ (or more accurately that of Data Group 1)\n    // within the circuit as this is the only data group we use to build the proof (age, country, etc.)\n    let dg1_hash = sha256::sha256_var(dg1, dg1_size as u64);\n\n    for i in 0..32 {\n        // Check the hash of dg1 is indeed in the e_content\n        assert(dg1_hash[i] == e_content[dg1_offset_in_e_content + i]);\n    }\n\n    let computed_final_hash = sha256::sha256_var(e_content, e_content_size as u64);\n\n    for i in 0..32 {\n        // The last 32 bytes of the signed_attributes are the hash of the data groups\n        // The rest is padding and the signature date, not important to check\n        assert(computed_final_hash[i] == signed_attributes[signed_attributes_size - 32 + i]);\n    }\n}\n","path":"/Users/jordanbettencourt/Documents/GitHub/Noir/passport_circuits/src/noir/lib/data-check/integrity/src/lib.nr"}},"names":["main"],"brillig_names":["build_msg_block","attach_len_to_msg_block","build_msg_block","directive_integer_quotient","directive_invert","directive_to_radix"]}